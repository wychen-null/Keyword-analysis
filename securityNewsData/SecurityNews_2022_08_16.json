[
   {
      "time": "2022-08-16",
      "title": "CERT-UA",
      "text": " "
   },
   {
      "time": "2022-08-16",
      "title": "APT-C-35: New Windows Framework Revealed",
      "text": " Cybersecurity News, Threat Research, and more from the Team Spearheading the Evolution of Endpoint SecurityMorphisec Labs has tracked the group’s activity and now exclusively details the latest updates to the group’s Windows framework, a.k.a. YTY, Jaca. In this blog post, we briefly discuss the history of the DoNot team and shed light on updates revealed by the latest samples found in the wild. Known TTPs, or malware commonalities, include:All previously known framework variants attributed to the DoNot Team share similar attributes.Morphisec Labs has identified a new DoNot infection chain that introduces new modules to the Windows framework. In this post we detail the shellcode loader mechanism and its following modules, identify new functionality in the browser stealer component, and analyze a new DLL variant of the reverse shell.Delivery pathway to infect a machine DoNot’s latest spear phishing email campaign used RTF documents and targeted government departments, including Pakistan’s defense sector. When the RTF document is opened, it tries to fetch a malicious remote template from its C2 by sending an HTTP GET request in the form: <domain>/<X>/<Y>.php. If the User-Agent for that request doesn’t contain MSOffice, which is case sensitive and added by default in Office applications, the C2 returns a decoy document with empty content. Otherwise, it downloads and injects a macro weaponized document. This technique may trick a security solution that tries to scan the URL without the MSOffice User-Agent header and mark it as clear. The remote template URLs are active for a limited period of time which makes analysis difficult.When a remote template is injected, it lures the victim to enable editing and content to allow the malicious macros to execute. Once macros are enabled, the Document_open routine executes and starts with a for loop to delay the malicious code execution, and then calls to the appropriate function based on the Winword.exe bitness.Document_open routine codeThe function injects a shellcode (32-bit/64-bit) into the process memory and invokes it. The shellcode is injected using the following three WinAPI functions:WinAPI calls used for the shellcode executionBefore the execution of the payload, the shellcode decrypts itself using a simple decryption routine—not followed by xor with a two-byte key, which changes between stages. After the shellcode is invoked, it starts execution by decrypting the rest of the shellcode bytes and passing the execution to the next stage. Shellcode decryption routine before decrypting the next chunkNext, the shellcode downloads an encrypted blob from its C2: <domain>/<X>/<Y><Z>.ico (for the 32-bit shellcode) or <domain>/<X>/<Y><Z>.png (for the 64-bit shellcode) and decrypts it. The decrypted blob is the second-stage shellcode, and like the first-stage shellcode, it starts by decrypting the rest of the bytes in the shellcode before passing execution to the next stage.In the 64-bit version of the first stage shellcode, the actor left what seem to be strings belonging to the configuration of the shellcode builder:'sm\\\\INCLUDE\\\\PCOUNT\\\\SHELL32.INC'include 'c:\\\\Fasm\\\\INCLUDE\\\\WIN32AXP.INC'include 'Shellcodes\\\\MyAssemblyMacros\\\\MyAssemblyMacrosMain.INC';if debugging turn this bit ondebug = 0 xor_key_main = 0xADxor_key_payload = 0xFExor_key_url = 0xCE expiry_year_date = 0x7e6070fmcafee_expiry_year_date = 0avg_expiry_year_date = 0norton_expiry_year_date = 0bitdefender_expiry_year_date = 0x7e6070feset_expiry_year_date = 0x7e60717 define_real_variable local_path_exe_env, '%tmp%\\\\..\\\\winsvsc.exe',0define_real_variable tmp_env_path, '%tmp%\\\\document.doc',0define_real_variable clear_registry, 'reg delete \\\"HKCU\\\\Software\\\\Microsoft\\\\Office\\\\12.0\\\\Word\\\\ResiliThese configurations include XOR keys used in the second-stage shellcode, and expiry dates for security products such as McAfee, Norton, and Bitdefender. Some strings appear to be the attacker's local paths and debugging flags.Next, the shellcode checks for security solutions by validating the existence of their drivers’ .sys, located under C:\\Windows\\System32\\drivers. If security solutions are present, the shellcode compares the current date to an expiry date configured in the shellcode builder and operates accordingly. For instance, in the researched sample, [1] - [7] denote the following values:[1] hxxp://mak.logupdates.xyz/DWqYVVzQLc0xrqvt/HG5HlDPqsnr3HBwOKY0vKGRBE7V0sDPdZb09n7xhp0klyT5X.mp3[2] hxxp://mak.logupdates.xyz/DWqYVVzQLc0xrqvt/HG5HlDPqsnr3HBwOKY0vKGRBE7V0sDPdZb09n7xhp0klyT5X.doc[3] %tmp%\\syswow64.dll[4] %tmp%\\document.doc[5] Qoltyfotskelo[6] schtasks.exe /create /tn wakeup /tr \\\"rundll32 %tmp%\\syswow64.dll, HPMG\\\" /f /sc DAILY /st 11:00 /ri 10 /du 24:00[7] cmd.exe %tmp%\\\\syswow64.dllThe malware will execute values depending on whether it finds a security solution. For example, the following table demonstrates the operation performed based on the driver found and the comparison between the current date and expiry date:Security solutions and corresponding actions according to the expiry dateIf none of the drivers are found on the victim’s machine, the shellcode executes the default routine which downloads from [1], and modifies the three first bytes back to their original form. This technique is used to evade security solutions and keep them from scanning the executable. It then executes the exported function [5].Morphisec Labs hasn’t found a clear motive for the included expiry date and driver check. When malware checks for security solutions in conjunction with a certain date, it’s often because the authors tested their bypass against the latest version. Future updates would react differently as they’re not tested. Another common malware behavior after finding security solutions is to evade or abort execution. In this case, the malware slightly modifies its behavior but mostly continues its malicious activity. The initial infection executes the main DLL. This DLL is responsible for beaconing back to the C2 server that the infection was successful and downloading the next component in the framework. The following figure outlines the high-level relationships between the components in the rest of the execution:Component relationships with new/updated components highlightedDelivered by the shellcode, the main DLL usually contains two exported functions. In our case,  Qoltyfotskelo (referred to as the first exported function) and Yolueorgw (referred to as the second exported function).The first exported function is responsible for installing persistence and checking for security solutions. Persistence is achieved by setting a new Scheduled Task (via COM objects) that runs every three minutes. The action assigned to the task is to run the second exported function—Yolueorgw.The second exported function is responsible for beaconing back to the C2 server. Before it does so, it creates a mutex to avoid multiple instances running at the same time, and performs VM detection using WMI queries:Looking for VMware, VMware Virtual Platform, and VirtualBox in csproduct nameThe malware then uses Windows Management Instrumentation (WMI) to collect basic system information such as the name, operating system caption, build number, and processor ID:Beaconing information sent to the server before encryptionTo that information, it concatenates the victim’s ID and the folder names under C:\\Program Files and C:\\Program Files (x86) to learn which software is installed on the system.  What we refer to as victim ID is a concatenation of Username-ComputerName-ProcessorId. This string identifies the victim in later communication with the C2 server. Once this is done the malware can encrypt the victim’s data and beacon back to its C2 server. The malware and server encryption is AES-256 with two sets of embedded keys and IVs. The encrypted data is then encoded using Base64. The beaconing process is divided into two steps shown below:Beaconing messages for downloading the next componentThe first message to the server is sent as a POST request to the first URL path (<first_path>) embedded in the binary. The body contains the following encrypted information:Name: CPU Name>Caption: OS Version>Build: Build Number V:|||Username-ComputerName-ProcessorId||||||O|||3|||Folder #1 Name?Folder #2 Name…Depending on the server’s response, the malware will either stay idle and keep the beaconing loop, or download the next stage. If the latter, the malware sends another POST request to a second URL path (<second_path>) on the same server. This message contains the following encrypted information: Username-ComputerName-ProcessorId|||Next stage DLL nameThe response to that request is the next stage DLL. To execute the next stage, the malware creates another scheduled task and removes the previous one using a clean-up .bat file (see ms.bat in the Appendix section).The main purpose of this stage is to download and execute the modules used to steal the user’s information. To understand which modules are used in the current infection, the malware communicates with another C2 server. The malware fetches the new address from an embedded link that refers to a Google Drive document containing the encrypted address:Download the encrypted C2 server address from Google DriveThe decryption of the C2 address downloaded from Google DriveThis architecture allows the authors to frequently update their C2 servers without needing to redeliver the binary. After the C2 server address is decrypted, the malware sends a POST request to it with the encrypted victim’s ID in the request body. The response is the modules’ configuration:This framework’s modularity stands out. The configuration controls which modules to download and execute without needing to update the binary. Morphisec Labs witnessed how this functionality came into play when a single binary communicated with different C2 servers and downloaded different modules across multiple runs over time.The response specifies information about the modules, delimited by | (pipeline) where each part has the following format:Module name>Module size>Should download?>Export name to execute>Additional parametersAdditionally, there are special characters the malware looks for such as:The following figure illustrates the various modules and the interactions between them:While Morphisec Labs was researching the previously known modules, one module caught our attention—the browser stealer. The browser stealer was first introduced to the framework in late 2020 and since then, we haven’t seen any significant changes. Until now.Instead of implementing the stealing functionality inside the DLL, the module uses four additional executables downloaded by the previous stage (WavemsMp.dll). Each additional executable steals information from Google Chrome and/or Mozilla Firefox. The following table summarizes what data is stolen from each browser:WinBroGogle.exeGoogle Chrome credentialsC:\\ProgramData\\ucredgogle_qrty%base%\\usagoglyse.rnmWinBroGoMoH.exeGoogle Chrome and Mozilla Firefox History1. %base%\\goo_bhf.txt2. %base%\\maza_bhf.txt1. %base%\\goo_bhf.rnm2. %base%\\maza_bhf.rnmWinBroMozla32.exeFirefox login (profile data)C:\\ProgramData\\usam0zlp_xcertyuqas%base%\\usam0zlp.rnmWinBroMozla64.exeFirefox login (profile data)C:\\ProgramData\\usam0zlp_xcertyuqas%base%\\usam0zlp.rnmStolen data by each executable (%base% = C:\\ProgramData\\DeviceStage\\usabrowatad)The browser module executes each executable; they steal the data and store it in a temporary plain text file. The file is then encrypted and saved as a .rnm file which is later sent back to the C2 server by the file upload module ieflagUl.dll.So far the reverse shell module has been implemented as an executable file. But now the actor aligns with the rest of the modules and recompiles the reverse shell as a DLL. The functionality remains the same, opening a socket to the attacker’s machine (located at 162.33.177[.]41), creating a new hidden cmd.exe process, and setting the STDIN, STDOUT, and STDERR as the socket.The shell runs until the actor sends the string “exit\\n”.Defending against APTs like the DoNot team requires a Defense-in-Depth strategy that uses multiple layers of security to ensure redundancy if any given layers are breached. Any sufficiently large organization is at risk of being attacked by an APT group such as the DoNot team. And these groups target a crucial security gap that few organizations have plugged. This gap exists between attack surface reduction strategies—such as patching security updates, hardening networks, firewalls, and web applications firewalls; and technologies such as data security tools, NGAV, EDR, EPP, and XDR, etc., which focus on detecting anomalies on the disc or in the operating system. That gap is the runtime environment in memory.The hardest attacks to defend against are those that—like the Windows framework detailed here—target applications at runtime. This is because popular security solutions such as NGAV, EDR, EPP, XDR, etc. focus on detecting anomalies on the disc or operating system. Their ability to detect or block attacks in memory at runtime is limited. To the extent they can do so, they cause major system performance issues and false alerts because they must be dialed to their most aggressive alert settings. echo offSETLOCALset id=%1set pat=%2set t_sk=%3set t_sk_self=%4set extra_lld=%5::echo %id%::echo %pat%schtasks /delete /tn %t_sk_self% /ftaskkill /F /PID %id% /Ttimeout /t 2taskkill /PID %id% /T /Ftimeout /t 2schtasks /delete /tn %t_sk% /ftimeout /t 2schtasks /delete /tn %t_sk_self% /ftimeout /t 2schtasks /delete /tn %t_sk_self% /ftimeout /t 2del %pat%:: del batch file selftimeout /t 2del \"%~f0\" & EXIT 486f772d81a3b90ba76617fd5f49d9ca99dac1051a9918222cfa25117888a1d5d566680ca3724ce242d009e5a46747c4336c0d3515ad11bede5fd9c95cf6b4ce28c71461ac5cf56d4dd63ed4a6bc185a54f28b2ea677eee5251a5cdad07077b89761bae130d40280a495793fd639b2cb9d8c28ad7ac3a8f10546eb3d2fc3eefc41c221c4f14a5f93039de577d0a76e918c915862986a8b9870df1c679469895c2c84b325b8dc5554f216cb6a0663c8ff5d725b2f26a5e692f7b3997754c98d4da70038cdf5aea822d3560471151ce8f8bacd259655320dea77d48ccfa5b5af4fd3a05cb5b4ae4454079e1b0a8615c449b01ad65c5c3ecf56b563b10a38ecfdefd71fa80d71b2c68c521ed22ffb21a2cff12839348af6b217d9d2156adb00e5507fc0e9c47c02835ecbbb63e209287be215656d82b868685a61201f8212d083d96e7b6cc2dd3ae311061fefa151dbb07d8e8a305aed00fa591d5b1cce43b9b0de90cb497cad8537da3c02be7e8d277d29b78b53f78d13c797a9cd1e733724cf7893ca5ec47baeb7884c05956ff52d28afe6ac49e7aba2964e0e6f2514d7942ef89b2ef052657350f5c67f999947cf8cd6d06a685875c31e70d7178ffb396b5b9680f2f4b6b1f06cf8de794a8d6be7b421ec1d4aeb71d03cccfc4b3dfd1b037993f0c1794711f3090deb2e87d8542f7c683d45dc41e4087c99ce3dca4b28a9e6f65ebee134afe192cdc7fc5cc9f83b8273b6f282a6a382c709f2a21d26f532b2d3worldpro[.]buzzser.dermlogged[.]xyzdoctorstrange[.]buzzclipboardgames[.]xyzbeetelson[.]xyztobaccosafe[.]xyzkotlinn[.]xyzfitnesscheck[.]xyzdayspringdesk[.]xyzsrvrfontsdrive[.]xyzglobalseasurfer[.]xyzesr.suppservices[.]xyz Stay in the loop with industry insight, cyber security trends, and cyber attack information and company updates."
   },
   {
      "time": "2022-08-16",
      "title": "Secure Boot Bypass Flaws Affect Bootloaders of Many Devices Made in Past Decade - SecurityWeek",
      "text": " Hi, what are you looking for?Bootloaders present in a majority of computers made in the past 10 years are affected by Secure Boot bypass vulnerabilities, according to firmware security company Eclypsium.ByFlipboardRedditWhatsappWhatsappEmailEduard Kovacs (@EduardKovacs) is a managing editor at SecurityWeek. He worked as a high school IT teacher for two years before starting a career in journalism as Softpedia’s security news reporter. Eduard holds a bachelor’s degree in industrial informatics and a master’s degree in computer techniques applied in electrical engineering.Subscribe to the SecurityWeek Email Briefing to stay informed on the latest threats, trends, and technology, along with insightful columns from industry experts.Join us as we delve into the transformative potential of AI, predictive ChatGPT-like tools and automation to detect and defend against cyberattacks.As cybersecurity breaches and incidents escalate, the cyber insurance ecosystem is undergoing rapid and transformational change. FlipboardRedditWhatsappWhatsappEmailLess than a week after announcing that it would suspended service indefinitely due to a conflict with an (at the time) unnamed security researcher...OpenAI has confirmed a ChatGPT data breach on the same day a security firm reported seeing the use of a component affected by an...The supply chain threat is directly linked to attack surface management, but the supply chain must be known and understood before it can be...A group of seven security researchers have discovered numerous vulnerabilities in vehicles from 16 car makers, including bugs that allowed them to control car...A researcher at IOActive discovered that home security systems from SimpliSafe are plagued by a vulnerability that allows tech savvy burglars to remotely disable...Patch Tuesday: Microsoft warns vulnerability (CVE-2023-23397) could lead to exploitation before an email is viewed in the Preview Pane.Patch Tuesday: Microsoft calls attention to a series of zero-day remote code execution attacks hitting its Office productivity suite.The latest Chrome update brings patches for eight vulnerabilities, including seven reported by external researchers.Got a confidential news tip? We want to hear from you.Reach a large audience of enterprise cybersecurity professionals Subscribe to the SecurityWeek Daily Briefing and get the latest content delivered to your inbox.Copyright © 2023 SecurityWeek ®, a Wired Business Media Publication. All Rights Reserved. \n\n"
   },
   {
      "time": "2022-08-16",
      "title": "Evil PLC Attack: Hacking PLCs to Attack Engineering Workstations | Claroty",
      "text": " Team82 Research\nThe attack targets engineers working every day on industrial networks, configuring and troubleshooting PLCs to ensure the safety and reliability of processes across critical industries such as utilities, electricity, water and wastewater, heavy industry, manufacturing, and automotive, among others.This paper will describe, in depth, not only how engineers diagnose PLC issues, write, and transfer bytecode to PLCs for execution, but also how Team82 conceptualized, developed, and implemented numerous novel techniques to successfully use a PLC to achieve code execution on the engineer’s machine.The full report includes a list of affected vendors and products, as well as links to their respective advisories and remediations (or mitigations).Programmable logic controllers (PLCs) have for more than a decade been the focus of advanced attacks. From Stuxnet to the recently uncovered Incontroller/Pipedream platform, threat actors try to reach and control PLCs in order to modify the processes they oversee, cause disruption, physical damage, and threaten personal safety. But what if an attacker was able to flip that scenario on its head and turn the PLC into the predator rather than the prey? What if there was a way to weaponize PLCs in order to exploit engineering workstations, the powerful platforms used to configure and maintain PLCs? These workstation applications are often a bridge between operational technology networks and corporate networks. An attacker who is able to compromise and exploit vulnerabilities in an engineering workstation could easily move onto the internal network, move laterally between systems, and gain further access to other PLCs and sensitive systems. Team82 today has released a research paper that describes just such a novel attack, which it has named the Evil PLC Attack.The attack targets engineers working every day on industrial networks, configuring and troubleshooting PLCs to ensure the safety and reliability of processes across critical industries such as utilities, electricity, water and wastewater, heavy industry, manufacturing, and automotive, among others. OT networks may have dozens of PLCs overseeing industrial processes; an attacker wishing to physically disrupt a process would need to first perform an extensive enumeration of those controllers in order to find the right one to target. The Evil PLC Attack turns the PLCs into the tool rather than the target. By weaponizing one PLC, an attacker may in turn compromise the engineer’s workstation, which is the best source for process-related information and would have access to all the other PLCs on the network. With this access and information, the attacker can easily alter the logic on any PLC. The trick would be to lure an engineer to connect to a compromised PLC; the quickest way is to cause a fault on the PLC. That is a typical scenario an engineer would respond to, and connect using their engineering workstation application as a troubleshooting tool. This was Team82’s approach as we decided to research this novel attack vector, by finding vulnerabilities in each of the seven engineering workstation platforms that allowed us to weaponize the PLC in a way that when an upload procedure is performed—upload procedures involve the transfer of metadata, configurations, and textcode from the PLC to the engineering workstation—our specifically crafted auxiliary pieces of data would cause the engineering workstation to execute our malicious code.This technique weaponizes the PLC with data that isn't necessarily part of a normal static/offline project file, and enables code execution upon an engineering connection/upload procedure. Through this attack vector, the goal is not the PLC, such as it was, for example, with the notorious Stuxnet malware that stealthily changed PLC logic to cause physical damage. Instead, we want to use the PLC as a pivot point to attack the engineers who program and diagnose it and gain deeper access to the OT network.It’s important to note that all the vulnerabilities we found were on the engineering workstation software side and not in the PLC firmware. In most cases, the vulnerabilities exist because the software fully trusted data coming from the PLC without performing extensive security checks.Team82 devices three distinct attack scenarios for the Evil PLC Attack. Weaponizing PLCs to Achieve Initial Access: Attackers could use weaponized PLCs in order to gain an initial foothold on internal networks, or even for lateral movement.Attacking Traveling Integrators: Attackers could target system integrators and contractors as a means of entry to many different organizations and sites around the world.Weaponizing PLCs as a Honeypot: Defenders could use honeypot PLCs to attract and attack possible attackers, thus deterring and frustrating would-be attackers.PLCs that are exposed to the internet generally lack security such as authentication and authorization, and are revealed through a Shodan and Censys search. An attacker able to access a PLC in this way is able to modify parameters or their behavior and logic through malicious download proceduresOpportunistic attackers identify internet-facing PLCs, connect to them using commercial engineering workstation software, and upload the current project, which includes code and settings from the PLC. Then, the attackers will modify the logic of the project, and perform a download procedure to change the PLC logic with their modifications. One example of such an incident was the 2020 attack on Israel’s water supply, where attackers exploited accessible PLCs and attempted to flood the water supply with chlorine.Our research suggests that attackers could use the internet-facing PLCs as a pivot point to infiltrate the entire OT network. Instead of simply connecting to the exposed PLCs and modifying the logic, attackers could arm these PLCs and deliberately cause a fault that will lure an engineer to them. The engineer, as a method of diagnostics, will perform an upload procedure that will compromise their machine. The attackers now have their foothold on the OT network.Modern OT management often involves third-party engineers and contractors interacting with many different networks and PLCs. In this attack scenario, the system integrator is the pivot point between the PLC and engineering workstation that has oversight of numerous OT networks. The attack would look like this: An attacker would locate a PLC in a remote, less secure facility that is known to be managed by a system integrator or contractor. The attacker will then weaponize the PLC and deliberately cause a fault on the PLC. By doing so, the victim engineer will be lured to the PLC in order to diagnose it. Through the diagnosis process, the integrator will do an upload procedure and have their machine compromised. After gaining access to the integrator’s machine, which by design is able to access many other PLCs, attackers could in turn attack and even weaponize newly accessible PLCs inside other organizations, broadening their control even further.This attack vector is useful from a defensive perspective where it could be used to trap attackers. Given that attackers often use the same commercial tools as engineers, defenders can purposely set up publicly facing weaponized PLCs, and allow attackers to interact with them. These PLCs will act as a honeypot, attracting attackers to interact with them. However, if an attacker falls into the trap and performs an upload from the decoy PLC as part of the enumeration process, the weaponized code will execute on the attacking machine. This method can be used to detect attacks in the early stage of enumeration and might also deter attackers from targeting internet-facing PLCs since they will need to secure themselves against the target they planned to attack.We decided to focus on the following seven targets:For each target/platform we tried to understand the whole download/upload mechanism by reverse engineering the firmware and the engineering workstation software. Our goal was to find discrepancies between what the PLC is using and what engineering workstation is using. If we were to find such inconsistencies, we could weaponize the PLC through a malicious download procedure to store a specifically crafted piece of data that won’t affect the PLC, but when parsed by the engineering platform it will trigger and exploit a vulnerability.The research process of our Evil PLC Attack is as follows:Setup: Setting up a testbed environment with a target PLC, compatible engineering workstation, and I/O field devices.Building “Hello World:” Reading PLC manuals, watching instructional videos, and building a benign program to control simple processes.Project File: Explore what is being stored in a project file (metadata, configurations, textcode) and how the data is serialized.Reverse Engineering: Exploring the PLC hardware and firmware in addition to the engineering workstation software.Upload/Download Procedures: Understand the mechanics of the upload/download procedures, and what data is transferred through the proprietary protocol.Protocol Analysis: Analyze the proprietary protocol and its functionality, and build a fully featured client.Find Discrepancies: Understand the differences between what information is transferred and stored in the PLC, without being parsed or used.Hunt for Vulnerabilities: Research all the parsing code flows of all pieces of information that the engineering workstation transfers to the PLC that are not used/modified on the PLC.Weaponize: Using the client, implement a malicious download procedure that stores specifically crafted data on the PLC.Exploit: Engineer connects to the PLC and performs an upload procedure. The engineering workstation parses the specifically crafted data we implemented. The parsing flow triggers the vulnerability and executes our code.For each target vendor platform, the full ecosystem that we needed to research consist of:The engineering workstation softwareEngineering workstation project fileProprietary protocol (PLC ←→ Engineering workstation)PLC firmwareLogic code (bytecode, textcode)Using our thorough research methods, we were able to find previously unreported vulnerabilities that allowed us to weaponize the affected PLCs and attack engineering workstations whenever an upload procedure occurred. All of the findings were reported to the seven affected vendors in accordance with Team82’s coordinated disclosure policy.All of the vulnerabilities described in this paper were reported to the affected vendors in accordance with Team82’s Coordinated Disclosure policy. Most vendors issued fixes, patches, or mitigation plans against the Evil PLC Attack. That said, getting to 100% patching level, especially in critical infrastructure, is not easy and therefore requires additional mitigation steps to reduce the risk of the Evil PLC Attack. Here are a few we recommend:In the Evil PLC attack technique, weaponizing is the first step and therefore, we recommend limiting physical and network access to PLCs as much as possible. There is no question that such devices shouldn't be accessible externally or exposed online. But also internal access should be limited to authorized engineers and operators only.The process of securing the connection to your PLCs is long, tedious, and when implemented incorrectly even ineffective, so we recommend implementing the following:Network Segmentation and Hygiene: The first step in securing the connection to your PLCs is limiting access by strictly segmenting your network. Allow access to your PLCs only to a small set of engineering workstations, which reduces the attack surface in your network considerably.Use Client Authentication: It is crucial to configure the PLC to use a client authentication mechanism to validate the identity of the client, the engineering station. Currently, some vendors implement such communication protocols, where instead of allowing any engineering workstation to communicate with the PLC, only a specific and predefined set of engineering workstations are able interact with the PLC, by requiring the engineering workstation to present the PLC with a certificate. Even Better, PKI: A more robust solution is to use a full Public Key Infrastructure (PKI) system to validate and encrypt all traffic between the client, engineering workstation, and the server, the PLC. Mutual authentication, more commonly referred to as mutual TLS, helps to significantly reduce the risk of someone hacking your OT assets. However, the reality is that PKI is not yet implemented in many ICS product lines. Network Traffic Monitoring: The Evil PLC attack vector involves performing download/upload procedures to/from a PLC. As such, it is important to monitor your OT network traffic and detect these types of events in particular, and if such a procedure would occur in an unexpected situation, it could indicate an exploitation attempt.Stay Up To Date: As attackers and defenders alike research this new attack vector further, more vulnerabilities like the ones shown above will be discovered, and OT vendors will patch those vulnerabilities. It is important to stay up to date with your OT software, which will protect you from attacks exploiting those one-day vulnerabilities.CWE-749 Exposed Dangerous Method or FunctionWhen user authentication is not enabled the shell can execute commands with the highest privileges. Red Lion SixTRAK and VersaTRAK Series RTUs with authenticated users enabled (UDR-A) any Sixnet UDR message will meet an authentication challenge over UDP/IP. When the same message comes over TCP/IP the RTU will simply accept the message with no authentication challenge.CVSS V3: 10CWE-288: Authentication Bypass Using an Alternative Path or ChannelRed Lion SixTRAK and VersaTRAK Series RTUs with authenticated users enabled (UDR-A) any Sixnet UDR message will meet an authentication challenge over UDP/IP. When the same message is received over TCP/IP the RTU will simply accept the message with no authentication challenge.CVSS V3: 10The vulnerability is caused by the using deprecated deserialization functions and/or classes such as BinaryFormatter in the zenon internal graphic utility DLLs.CVSS V3: 6.3The vulnerability is caused by the default directory permissions for the Zenon Projects directory in the engineering studio default workspace. By allowing access to all the users on the system, the attacker may alter the zenon project itself to load arbitrary zenon projects in the zenon runtime.CVSS V3: 5.9Code Execution through overwriting service executable in utilities directory. The vulnerability is caused by the weakly configured default directory permission for the ABB Utilities directory.CVSS V3: 7.0© 2023 Claroty. All rights reserved."
   },
   {
      "time": "2022-08-16",
      "title": "Argentina's Judiciary of Córdoba hit by PLAY ransomware attack",
      "text": " Argentina's Judiciary of Córdoba has shut down its IT systems after suffering a ransomware attack, reportedly at the hands of the new 'Play' ransomware operation.The attack occurred Saturday, August 13th, causing the Judiciary to shut down IT systems and their online portal. The outage is also forcing the use of pen and paper for submitting official documents.\"The cyberattack suffered by the technological infrastructure of the Court of Córdoba on Saturday, August 13th, 2022, for a ransomware that has compromised the availability of its IT services,\" reads a Google translation section of the plan.Like all ransomware operations, the threat actors will compromise a network and encrypt devices. When encrypting files, the ransomware will append the .PLAY extension as shown below.However, unlike most ransomware operations that leave lengthy ransom notes to issue dire threats to their victims, the Play ransom notes are unusually simple.Instead of ransom notes being created in every folder, Play's ReadMe.txt ransom note is only made at the root of a hard drive (C:\\) and simply contains the word 'PLAY' and a contact email address.There is no data leak associated with the ransomware gang or any indication that data is stolen during attacks. "
   },
   {
      "time": "2022-08-16",
      "title": "Malicious PyPi packages aim DDoS attacks at Counter-Strike servers",
      "text": " A dozen malicious Python packages were uploaded to the PyPi repository this weekend in a typosquatting attack that performs DDoS attacks on a Counter-Strike 1.6 server.Python Package Index (PyPi) is a repository of open-source software packages that developers can easily incorporate into their Python projects to build complex apps with minimal effort.However, as anyone can upload packages to the repository, and packages are not removed unless they are reported as malicious, the repository is being more commonly abused by threat actors who use it to steal developer credentials or deploy malware.This weekend, researchers at Checkmarx discovered that a user named \"devfather777\" published 12 packages that used a name similar to other popular packages to trick software developers into using the malicious versions instead.Typosquatting attacks rely on developers mistakenly using a malicious package with a similar name to a legitimate one. For example, some of the packages in this campaign and their legitimate counterparts (in parenthesis) are Gesnim (Gensim), TensorFolw (TensorFlow), and ipaddres (ipaddress).The complete list of uploaded malicious PyPi packages are:Because software developers usually fetch these packages via the terminal, it's easy to type its name with a letter in the wrong order. Since the download and build continue as expected, the victim doesn't realize the mistake and infects their device.While CheckMarx reported the packages to the PyPi repository, they remain online at the time of this writing.After downloading and using one of these malicious Python packages in their application, embedded code in the setup.py runs to confirm that the host is a Windows system, and if it is, it downloads a payload (test.exe) from GitHub.The malware installs itself and creates a Startup entry for persistence between system reboots, while it also injects an expired system-wide Root certificate.Next, it connects to a hardcoded URL to receive its configuration. If that fails on the third try, it seeks responses to HTTP requests sent to DGA (domain generation algorithm) addresses.In the case observed by the analysts, the configuration ordered the malware to recruit the host into a DDoS bot that began sending traffic towards a Russian Counter-Strike 1.6 server.The goal appears to take down the Counter-Strike Server by infecting enough devices that the sent traffic overwhelms the server.The GitHub repository used for hosting the malware has been taken down, but the threat actor could resume the malicious operation by abusing a different file hosting service.If you use the 12 mentioned packages and might have made a typing error this weekend, scrutinize your projects and double-check that you are using the legitimate software packages."
   },
   {
      "time": "2022-08-16",
      "title": "Microsoft disrupts Russian hackers' operation on NATO targets",
      "text": " The Microsoft Threat Intelligence Center (MSTIC) has disrupted a hacking and social engineering operation linked to a Russian threat actor tracked as SEABORGIUM that targets people and organizations in NATO countries.Microsoft says that SEABORGIUM, also known as ColdRiver by Google and TA446 by Proofpoint, primarily target NATO countries but have seen campaigns in the Baltics, Nordics, and Eastern Europe regions, including Ukraine.Believed to be a Russian state-sponsored hacking group, the threat actors attempt to steal sensitive emails from organizations and people of interest to Russia\"Within the target countries, SEABORGIUM primarily focuses operations on defense and intelligence consulting companies, non-governmental organizations (NGOs) and intergovernmental organizations (IGOs), think tanks, and higher education,\" explains Microsoft in a report released today.\"SEABORGIUM has been observed targeting former intelligence officials, experts in Russian affairs, and Russian citizens abroad.\"SEABORGIUM creates online personas through email, social media, and LinkedIn accounts that are used in social engineering campaigns against targeted individuals and organizations.Using the fake personas, the threat actors contact individuals of interest to strike up a conversation and build a rapport, ultimately leading with sending a phishing attachment.Microsoft says they have seen the threat actors distributing the attachments via emails with attached PDFs, links to file hosting services, or to OneDrive accounts hosting the PDF documents.Regardless of how the threat actors distribute the PDF, once opened, the attachment will show the victim a message stating that the document could not be viewed and that they should click on a button to try again.Clicking this button brings the victim to a landing page running phishing frameworks, such as EvilGinx, that to display a login form for the particular service.However, as EvilGinx acts as a proxy, the threat actors can steal the inputted credentials and authentication cookies/tokens generated after a user logs into their account.These stolen authentication tokens allow the threat actors to log into a compromised user's account even if 2FA is enabled.Once the hackers gains access to the targeted email account, Microsoft says they either steal emails and attachments or set up forwarding rules to receive all new emails sent to the compromised account.Microsoft has also seen the threat actors use the breached account to conduct conversations as the victim with other people of interest to gain access to sensitive information.In the campaign seen by Microsoft, SEABORGIUM stole documents from a UK political organization, which was then distributed on social media and a PDF sharing site.Today, Microsoft says they have taken action to disrupt SEABORGIUM's campaigns by disabling accounts used for surveillance, phishing, and email collection.Microsoft also shared sixty-nine domains believed to be associated with the threat actor's phishing campaigns used to steal credentials for Microsoft, ProtonMail, and Yandex accounts.Defenses include disabling email auto-forwarding in Microsoft 365, using the IOCs to investigate for potential compromise, requiring MFA on all accounts, and for more security, requiring FIDO security keys."
   },
   {
      "time": "2022-08-16",
      "title": "Russian hackers target Ukraine with default Word template hijacker",
      "text": " Threat analysts monitoring cyberattacks on Ukraine report that the operations of the notorious Russian state-backed hacking group 'Gamaredon' continue to heavily target the war-torn country.The particular threat group has been targeting Ukraine since 2014 and is considered responsible for several thousands of attacks against key public and private entities in the country.The most recent infection vector involves phishing messages carrying a self-extracting 7-Zip archive that fetches an XML file from an “xsph.ru” subdomain associated with Gamaredon since May 2022.The XML file leads to the execution of a PowerShell info-stealer, of which Symantec spotted several slightly modified variants, most likely an attempt to evade detection.Additionally, the Russian hackers used VBS downloaders to fetch the Pterodo backdoor, one of Gamaredon’s trademark tools, and in some cases, the Giddome backdoor.These backdoors allow the adversaries to record audio using the host’s microphone, snap screenshots from the desktop, log and exfiltrate keystrokes, or download and execute additional “.exe” and “.dll” payloads.Finally, in the recent campaign, the hackers were observed deploying the legitimate remote desktop protocol tools' Ammyy Admin' and 'AnyDesk.'None of these tactics are new, highlighting Gamaredon’s lack of sophistication that the threat group makes up for with persistence and continual targeting.CERT-UA’s observations of the infection chain also report on PowerShell info-stealers that attempt to snatch data stored on web browsers.An interesting tactic spotted by Ukraine’s cybersecurity agency is Gamaredon’s attempted modification of the “Normal.dotm” file on the host, using a specially crafted macro.This file is the default Microsoft Word template, so modifying it has the potential to lace all documents created on the compromised machine with malicious code.By doing so, Gamaredon uses victims as new sources of infection and high-quality ones, too, as unaware recipients are more likely to open the laced documents from senders they trust."
   },
   {
      "time": "2022-08-16",
      "title": "Germany to mandate minimum security standards for web browsers in government | The Daily Swig",
      "text": " Prototype pollutionPrototype pollution project yields another Parse Server RCEBug Bounty RadarThe latest programs for February 2023All Day DevOpsAppSec engineer keynote says Log4j revealed lessons were not learned from the Equifax breachInfosec beginner?A rough guide to launching a career in cybersecurityCybersecurity conferencesA schedule of events in 2022 and beyondLess celebrated browsers and deprecated applications like Internet Explorer will be browsers non-grataGermany is mandating the use of secure, modern web browsers across government networks with a proposal for minimum standards currently open to consultation.The proposed standard covers both desktop and mobile browsers, whereas previous security guidance only applied to desktop browsers on government PCs and workstations.Following the consultation, the BSI expects the minimum standard to be mandated across government systems. The move will bar federal employees from using non-compliant browsers, such as the now-deprecated Internet Explorer, on government business.“The minimum standards being put forward by the BSI are very encouraging,” Simon Backwell, information security manager at Benefex and a member of the ISACA Emerging Trends Working Group, told The Daily Swig.“Many of these standards are already what companies look for in software, so to extend them to browsers too ensures that organizations, especially government agencies or private sector companies within Germany, consider all aspects of their working environments. Most, if not all, modern browsers meet the standards, so there should be limited impact for organizations running these.”“All modern browsers are already very secure (ignoring privacy), with most of them sharing the exact same engine and therefore sharing the same security features and encryption capabilities,” Tarquin Wilton Jones, a developer and security expert at browser company Vivaldi, told The Daily Swig.“In general, browsers have been at the forefront of making secure connections, and implementing security features such as sandboxing.”The move is, he added, aimed more at improving security in government IT than at changing the way browsers are designed. However, he cautioned that the way some browsers do not allow users to turn off telemetry or vendor tracking data could cause compliance issues.Burp SuiteVulnerabilitiesCustomersCompanyInsights© 2023 PortSwigger Ltd."
   },
   {
      "time": "2022-08-16",
      "title": "Healthcare provider Novant issues data breach warning after site tracking pixels sent patients’  information to Meta servers | The Daily Swig",
      "text": " Prototype pollutionPrototype pollution project yields another Parse Server RCEBug Bounty RadarThe latest programs for February 2023All Day DevOpsAppSec engineer keynote says Log4j revealed lessons were not learned from the Equifax breachInfosec beginner?A rough guide to launching a career in cybersecurityCybersecurity conferencesA schedule of events in 2022 and beyondLeaked data potentially included patients’ email addresses, phone numbers, and device IP addressesNovant, which operates more than 50 healthcare facilities across North Carolina, said it placed a snippet of JavaScript code on its website as part of a promotional campaign during the early stages of the coronavirus pandemic.“The information did not include Social Security numbers or other financial information unless it was typed into a free text box by the user,” Novant said.“Based on our investigation, we do not have any evidence that this information was acted on by Meta or any other third party,” Novant said.“We also have implemented more structure, governance, and policies around the use of pixels and promise that we will take appropriate actions to ensure that this does not happen again.”Burp SuiteVulnerabilitiesCustomersCompanyInsights© 2023 PortSwigger Ltd."
   }
]