[
   {
      "time": "2022-09-15",
      "title": "TA453 Uses Impersonation to Capitalize on FOMO | Proofpoint US",
      "text": " Disarm BEC, phishing, ransomware, supply chain threats and more.Defend your data from careless, compromised and malicious users.Prevent identity risks, detect lateral movement and remediate identity threats in real time.Reduce risk, control costs and improve data visibility to ensure compliance.Leverage proactive expertise, operational continuity and deeper insights from our skilled experts.  AI-powered protection against BEC, ransomware, phishing, supplier risk and more with inline+API or MX-based deploymentProtect your people from email and cloud threats with an intelligent and holistic approach.Help your employees identify, resist and report attacks before the damage is done.Prevent data loss via negligent, compromised and malicious insiders by correlating content, behavior and threats.Manage risk and data retention needs with a modern compliance and archiving solution.Keep your people and their cloud apps secure by eliminating threats, avoiding data loss and mitigating compliance risk.Learn about this growing threat and stop attacks by securing today’s top ransomware vector: email.Implement the very best security and compliance solution for your Microsoft 365 collaboration suite.Secure access to corporate resources and ensure business continuity for your remote workers.Today’s cyber attacks target people. Learn about our unique people-centric approach to protection.Become a channel partner. Deliver Proofpoint solutions to your customers and grow your business.Learn about the benefits of becoming a Proofpoint Extraction Partner.Learn about our global consulting and services partners that deliver fully managed and integrated solutions.Learn about our relationships with industry-leading firms to help protect your people, data and brand.Learn about the technology and alliance partners in our Social Media Protection Partner program.Small Business Solutions for channel partners and MSPs.Find the information you're looking for in our library of videos, data sheets, white papers and more.Keep up with the latest news and happenings in the ever‑evolving cybersecurity landscape.Learn about the human side of cybersecurity. Episodes feature insights from experts and executives.Get the latest cybersecurity insights in your hands – featuring valuable knowledge from our own industry experts.Learn about the latest security threats and how to protect your people, data, and brand.Connect with us at events to learn how to protect your people and data from ever‑evolving threats.Read how Proofpoint customers around the globe solve their most pressing cybersecurity challenges.Browse our webinar library to learn about the latest threats, trends and issues in cybersecurity.Get free research and resources to help you protect against threats, build a security culture, and stop ransomware in its tracks.Proofpoint is a leading cybersecurity company that protects organizations' greatest assets and biggest risks: their people.Today’s cyber attacks target people. Learn about our unique people-centric approach to protection.Stand out and make a difference at one of the world's leading cybersecurity companies.Read the latest press releases, news stories and media highlights about Proofpoint.Learn about how we handle data and make commitments to privacy and other regulations.Learn about our people-centric principles and how we implement them to positively impact our global community.Access the full range of Proofpoint support services.It is important to note that for the purposes of this blog, Proofpoint refers to each of the TA453 personas by the sender name. While Proofpoint has previously observed TA453 using compromised email accounts to send phishing emails, Proofpoint has no specific indication that these spoofed individuals were victimized by TA453. Additionally, Proofpoint regularly sees TA453 pair the same spoofed person with different actor-controlled email addresses. In almost all cases, TA453 would engage in one-to-one conversations with their targets but this changed in mid-2022.Proofpoint researchers observed a shift in TA453's approach starting in June 2022. In this first campaign (Figure 1), TA453 started the conversation masquerading as \"Aaron Stein, Director of Research at FRPI.\" The actor included a variety of questions intended to generate a dialogue about Israel, the Gulf States, and the Abraham Accords. While these questions are generally meant to establish a pretext for sending a follow-up credential harvesting link or to deliver a malicious document, it is also possible they represent intelligence questions tasked to TA453. In the email, TA453's \"Aaron Stein\" launched the threat actor's use of Multi-Persona Impersonation (MPI) by referring to and including a \"Richard Wike, director of global attitudes research at PEW Research Center\" on the CC line.Figure 1. TA453 email posing as an \"Aaron Stein, Director of Research at FRPI.\"A day after the initial email, \"Richard Wike\" responded (Figure 2) to the email thread likely in an attempt to establish the veracity of the request and solicit a response from the target. In this case, no malicious documents or links were observed. Figure 2. TA453 follow-up email using another persona.Figure 3. Screenshot of TA453 using one of its cc'd personas to further the ruse targeting a medical researcher.Group Project: In June 2022, TA453's \"Carroll Doherty\" persona reached out to a prominent academic involved in nuclear arms control about a possible US versus Russia clash. This campaign ended up representing an evolution of TA453's MPI technique as the persona did not stop at reaching out to just one target but reached out to two targets at the same university. \"Carroll\" also cc'd three other TA453 personas on the email: \"Daniel Krcmaric,\" \"Aaron Stein,\" and \"Sharan Grewal.\"Figure 4. Timeline of TA453's Group Project email campaign.One of the targets responded initially to the outreach email but then ghosted \"Carroll.\" After the target failed to respond for a little over a week, \"Carroll\" kindly provided a OneDrive link to the article referenced in the original email (Figure 5). The link downloaded a document titled “The possible US-Russia clash.docx\" SHA256: 16a961475a88313478bc2406d6b442be9809e64ea9e2a4754debcce9200cf36b. Figure 5. Screenshots of \"Carroll\" persona sending the target a malicious OneDrive link and password.\"Carroll\" sent the password separately and followed up with the target to let them know the document is secure because it cannot be read without the password. Four days later, one of the cc'd TA453 personas, \"Aaron Stein,\" dropped \"Carroll\" from the email thread, apologized to the target, and resent the same OneDrive link and password (Figure 6). Figure 6. A cc'd TA453 persona attempting to convince a target of the legitimacy of the campaign.Similar to the document sent by \"Harald,\" this document also used remote template injection to download Korg. At this time, Proofpoint has only observed the beaconing information and has not observed any follow-on exploitation capabilities. The lack of code execution or command and control capabilities within the TA453 macros is abnormal. Proofpoint judges that infected users may be subject to additional exploitation based on the software identified on their machines. Proofpoint tracks multiple subgroups of TA453 differentiated primarily by victimology, techniques, and infrastructure. Some subgroups in their typical campaigns will engage in benign conversations with targets for weeks before delivering malicious links. Conversely, another subgroup tends to immediately send a malicious link in the initial email. While the mere presence of specific indicators does not definitively condemn an email as TA453, indicators of a possible TA453-linked persona include:All threat actors are in constant states of iterating their tools, tactics, and techniques (TTPs), advancing some while deprecating others. The use of MPI by TA453, while the group's latest technique, is likely to continue to evolve and morph as this group hunts for intelligence in support of the IRGC. Proofpoint researchers have already started to observe this potential next step with TA453 attempting to send a blank email, then respond to the blank email all while including all their \"friends\" on the CC line. This is likely the threat actor's attempt at bypassing security detection. Researchers involved in international security, particularly those specializing in Middle Eastern studies or nuclear security, should maintain a heightened sense of awareness when receiving unsolicited emails. For example, experts that are approached by journalists should check the journalist’s or their publication’s website to see if the email address belongs to them.Subscribe to the Proofpoint Blog "
   },
   {
      "time": "2022-09-15",
      "title": "Attacking the Android kernel using the Qualcomm TrustZone | Tamir Zahavi-Brunner’s Blog",
      "text": " \nSep 14, 2022\nIn this post I describe a somewhat unique Android kernel exploit, which utilizes the TrustZone in order to compromise the kernel.CVE-2021-1961 is a vulnerability I discovered in the communication protocol of Qualcomm’s TrustZone (QSEE). It allows you to corrupt memory management data in the protocol, which I exploited into instructing the TrustZone to modify the Android kernel memory, thus achieving arbitrary read/write primitives over physical memory addresses. I turned this powerful primitive into a reliable exploit that works out of the box without the need to be adapted per device/version.The bulk of communication between Android and QSEE is done between Android user mode programs and QSEE user mode programs, which are known as trustlets. In order to send a command to a trustlet, an Android user mode program will call an ioctl of the qseecom kernel module (/dev/qseecom), which will then send it to the QSEE kernel, which will in turn send it to the relevant trustlet. The response will go through the same components in reverse order.Part of the TrustZone technology allows certain regions of physical memory to be carved out as “secure”, meaning that only the Secure World can access them. This means that there are certain regions even the Linux kernel can’t access.\nOn the QSEE side, the QSEE kernel is accessible to everything, including the Normal World memory. The QSEE kernel does limit the trustlets, so by default each trustlet can only access a small chunk of secure memory which is its own.\nHowever, in order to allow Android user mode programs to communicate with trustlets efficiently, there is a way for them to share memory.This protocol is not always enough. Some trustlets need to read/write to memory that comes from other ION heaps. To solve this, a command that needs a trustlet to access another ION buffer would have a pointer to that ION buffer inside the input buffer.However, to do this, there are two issues that need to be solved:Now the QSEE kernel receives the whitelist entries alongside the input/output buffers. When parsing them, for each whitelist entry it goes to the input buffer and reads the address at the specified offset. It then gives the trustlet access to (“whitelists”) the memory from that address and for the size specified in the whitelist entry.To explain this in a more graphical way, here is how the data in the ioctl would look like:And this is how the data passed from qseecom to the QSEE kernel would look like:The bug is that there is no check to make sure addresses of different ION buffers don’t end up overlapping each other. If you do provide qseecom with two ION file descriptors with offsets that cause their addresses to overlap each other, you can cause one whitelist entry to point at a corrupted address which does not belong to any ION buffer; this will get that address whitelisted for the trustlet.For example, let’s take the diagram from above, but this time add another ION buffer to the ioctl. When qseecom writes the second ION buffer’s address to the input buffer it would look like this:But when we look at what the first whitelist entry now points to, it would look like this:\n(It’s 0x4444444433333333 and not 0x3333333344444444 because it’s little endian)At this point I realized that if the command I send to the trustlet instructs it to modify memory at the specified address, I can get it to modify memory at that corrupted address. And if the corrupted address happens to contain kernel memory, that could result in privilege escalation.As can be seen in the diagrams above, there is actually a side effect in what I described. By partially overwriting an address, data around it also gets corrupted. In the diagram you can see that the 0xaaaa and 0xbbbb were overwritten with 0x44444444.While I could have stuck to only overlapping addresses fully and not partially, I did want more flexibility than that in my exploit.\nI realized that I could actually increase the size of the input buffer more than what the trustlet needs, and no error would occur. The trustlet would just read all the data it needs and then ignore the rest. This means that I could perform all the address manipulations at the end of the input buffer, not touching any data that the trustlet is going to read.This does mean that I would need to know the physical address I want the trustlet to modify beforehand, so I can write it where the trustlet does expect a pointer (instead of letting qseecom do it), but this is also something I am going to solve.Now that I figured out how to easily trigger the vulnerability without side effects, I sat down to think about what would be the best way to manipulate addresses in order to exploit it. I realized that there is one more detail here which I haven’t really touched yet.Up until now I’ve only discussed how the input buffer can contain pointers to ION buffers that are contiguous in physical memory, but ION buffers can also be non-contiguous, only being contiguous in virtual memory. This usually depends on which heap the ION buffer was allocated from.To explain it in a more graphical way, here is a diagram of how it would look like:From the vulnerability point of view, this is very interesting. This allows me to also manipulate the size of a whitelisted buffer, as well as the address.At this point I stopped to think about my objective here. I know I can get kernel memory whitelisted, but the question is what should I try to whitelist. After thinking for a while I figured: Why not just try to whitelist the whole kernel memory?One thing that came up useful here is /proc/iomem. This pseudo-file shows what different regions of physical memory are used for. Here’s a snippet from its output:I figured that managing to whitelist all of Kernel code and Kernel data should be enough, even though it’s technically not the whole kernel memory, as it doesn’t include dynamically allocated memory.One more thing I had to take into account before I started to construct a technique was the limit of 4 ION buffers per request, which means I couldn’t just use as many as I want. More than that, I figured that it would be very useful to have one “normal” ION buffer per request, to allow me to have one pointer to data I fully control, which narrowed me to using only 3 ION buffers in my technique.At this point I started observing the physical addresses I got for ION buffers I allocated, trying different sizes and different heaps. I found interesting behaviors for the system and the qsecom heaps, which I used in my exploit.This gave me an idea: I could use an address from the qsecom heap to overwrite the size of one of the whitelisted chunks. Since the address fits in 32 bits it would overwrite the size completely (zeroing the following 4 bytes, but that doesn’t really matter). Then if I can zero the address of that chunk completely (or maybe reduce it to a very low number) it means I would whitelist everything from 0 until somewhere after Kernel code and Kernel data.\nNow the question I was left with is how to make the address of a chunk become zero.I figured that if I manage to get a system ION buffer whose physical addresses all have zeroes as their 4 higher bytes, I could zero their 4 lower bytes using the 4 higher bytes of the qsecom ION buffer, to reach an address that is all zeroes.Anyway, for my exploit I used QSEECOM_IOCTL_SEND_MODFD_CMD_REQ. The key here is that for this ioctl there is a check in qseecom to make sure that all physical addresses of ION buffers passed to it fit in 32 bits. If this check fails then the ioctl fails. Since there is really no other reason for the ioctl to fail, I can assume that a failure in this ioctl means that the ION buffer has a physical address that doesn’t fit in 32 bits.\nAt this point I can kind of “spray” ION buffers, basically continue allocating ION buffers from the system heap and running them through this ioctl. The first one that doesn’t fail fits in 32 bits.Note that this is the least reliable part of my exploit, because in theory you could just end up allocating more and more ION buffers without ever reaching one that fits in 32 bits. From my experience though, all you really need here is just a bit of patience.So I have a technique to whitelist all of the kernel code and data, let’s sum it up:Add the system ION buffer with a far offset (after the data that the trustlet reads), let’s say 0x100. At this point the input buffer should look like this:Add the qsecom ION buffer with an offset of 0x108 so it overwrites the size field of the first entry in the array. So now the input buffer should look like this:Add the same qsecom ION buffer once more, but this time with an offset of 0x9c so it zeroes the lower 4 bytes of the address. Now the input buffer should look like this:Granting the trustlet to access all of the kernel code and data is great, but it’s still not enough. I needed to figure out how to make the trustlet perform the modifications I want it to make to the kernel memory.So at this point I had one final thing to figure out in order to achieve kernel read/write: Find a command in a trustlet that gives me as much control over data being pointed to in the command, ideally something that copies memory from one place to another. Unfortunately, this turned out to be quite a headache.I started looking at the possible trustlets I could use, and immediately realized there is one issue here: I was working on Pixel devices, and the thing about Pixel devices is that compared to other vendors they don’t have a lot of trustlets on them. But to be honest, this is actually both bad and good. Of course bad because I don’t have a lot of trustlets to look for a copy functionality in, but good because I can pretty much expect all of the trustlets on a Pixel device to also exist on other devices, which makes my exploit more device-generic.At this point, it didn’t take me long to narrow my search to the Widevine trustlet. All other trustlets barely have any functionality that deals with pointers, so it was easy to rule them out. Widevine on the other hand is full of functionality; so although it’s very complex, I realized I pretty much had to use it for my exploit.The issue I kept facing is that even though the trustlet is full of functionality, it was very hard to reach it. Almost all of my commands kept failing due to one check or another before I could reach any interesting functionality. And remember, I wasn’t even trying to do anything malicious at this point, just trying to run valid commands.The bottom line is that reversing Widevine was quite a challenge in itself, but I’m going to leave it out of the scope of this blog post since I don’t want to make it too long. I did end up learning quite a lot about Widevine, so if you are interested in reversing Widevine yourself let me know; I might publish a separate blog post just about this.Anyway, after a lot of work reversing Widevine, I found commands that allowed me both to encrypt memory and decrypt memory with the same symmetrical key. This was good enough for me, because if you think about it, encrypt + decrypt (with the same symmetrical key) is just copy with extra steps.For arbitrary read:For arbitrary write:One little caveat regarding the encrypt/decrypt commands is that the size of each operation has to be aligned to the size of an AES block, which is 16 bytes. But this is actually barely an issue. It is not really a problem to read a few bytes more than needed, and if I want to write something that doesn’t align I can always read what was in there beforehand, so when writing I can make sure the extra memory is kept unchanged.Now was the time to test my arbitrary kernel read/write. I found the physical address of the global variable that decides if SELinux is enabled, changed it to 0 and it worked. I finally had a working exploit :)While this was indeed quite satisfying, I figured that since this exploit is super reliable and the primitive of arbitrary physical memory read/write is very powerful, I could push it even further. At this point to make the exploit work I needed to adapt it per build, as I needed to know the physical addresses of the symbols I wanted to modify, and these change per build. I wanted to avoid this part and make my exploit work on different builds and even different devices out of the box.One issue with kallsyms is that it gives you virtual addresses, not physical. But since it also has a symbol for the virtual base, I could subtract it from any other virtual address I found in order to determine its physical address.That’s it. At this point my exploit code worked and disabled SELinux on different devices and versions without needing adaptations. I also decided to change the string returned from /proc/version, just to demonstrate that since I have access through physical memory it’s just as easy for me to modify read-only memory as it is to modify read/write memory.Here’s a quick review of all the steps in the exploit:Let’s talk a bit about Android kernel exploitation/mitigation techniques. I haven’t really discussed mitigations yet, and I think it’s actually for a very good reason: At no point have I really encountered a mitigation I needed to bypass when writing this exploit.The bottom line is that since this exploit deals with physical memory, all kernel mitigations don’t really apply. Addresses are not randomized by ASLR which makes it much simpler to gain full control over kernel memory, and once I do have such control I don’t really care about code execution mitigations such as CFI or stack cookies.\nEven thinking about the future, looking into the much-discussed MTE; I haven’t tried but I do believe that such exploit that works on physical memory should also work with MTE enabled, since it’s also a mitigation that only applies in virtual memory.From an attacker’s point of view, I do think we might see a bit more of a trend to try to exploit components that deal with physical memory, especially if MTE does end up becoming a mainstream kernel mitigation. Also, not having to adapt the exploit per each build is nice to have.\nLooking at recent research, I found three other public Android exploits that deal with physical memory:From a defender’s point of view, the fact that I was able to exploit the kernel without encountering a single mitigation in the process is a bit concerning. Especially since today the kernel is pretty full of mitigations. I’m also not sure that MTE would have made it any better.\nI guess one thing I should say from a defender’s point of view, is that if you haven’t already, make sure to be extra sensitive and take extra care with any component that deals with physical memory.The last thing I’d like to say here is related to the interesting method of this exploit, attacking the kernel by using the TrustZone. The TrustZone is marketed as a security component, and is supposed to make Android devices more secure. Yet, in this exploit it actually does the opposite, as it created an avenue for me to attack the kernel that wouldn’t have existed otherwise. But I don’t want this blog post to become a rant on how I believe software should be secured, so I’ll leave it at that."
   },
   {
      "time": "2022-09-15",
      "title": "FBI: Hackers steal millions from healthcare payment processors",
      "text": " The Federal Bureau of Investigation (FBI) has issued an alert about hackers targeting healthcare payment processors to route payments to bank accounts controlled by the attacker.This year alone, threat actors have stolen more than $4.6 million from healthcare companies after gaining access to customer accounts and changing payment details.Cybercriminals are combining multiple tactics to obtain login credentials of employees at payment processors in the healthcare industry and to modify payment instructions.The FBI says that it received multiple reports where hackers are using publicly available personal details and social engineering to impersonate victims with access to healthcare portals, websites, and payment information.Phishing and spoofing support centers are additional methods that help hackers achieve their goal of gaining access to entities that process and distribute healthcare payments.FBI’s alert today notes that this specific threat actor activity includes sending phishing emails to financial departments of healthcare payment processors.They are also modifying Exchange Servers’ configuration and setting up custom rules for targeted accounts, likely to receive a copy of the victim’s messages.The FBI says that in just three such incidents in February and April this year, hackers diverted to their accounts more than $4.6 million from the victims.In February, one threat actor used credentials “credentials from a major healthcare company” to replace the direct deposit banking information of a hospital with accounts they controlled, stealing $3.1 million.In a separate incident the same month, cybercriminals used the same method to steal about $700,000 from another victim.Another attack happened in April when a healthcare company with more than 175 medical providers lost $840,000 to a threat actor that impersonated an employee and change the Automated Clearing House (ACH) instructions.The FBI has compiled a short list of indicators of compromise that could help healthcare organizations spot cybercriminal attempts to gain access to user accounts.Organizations should deem suspicious any changes to the email server that have not been planned or happen without a legitimate reason.Employees requesting a reset of passwords and phone numbers for two-factor authentication (2FA) within a short period should also trigger an alarm, just as reports of failed password recovery attempts.Among the mitigations the FBI proposes is running regular network security assessments (e.g. penetration testing, vulnerability scans) to ensure compliance with current standards and regulations.Additional recommendations include:"
   },
   {
      "time": "2022-09-15",
      "title": "U.S. gov’t unveils sanctions, charges, bounties on Iranian ransomware actors",
      "text": " The Department of the Treasury’s Office of Foreign Assets Control (OFAC) said the hackers had been active since 2020, attacking everything from a New Jersey municipality to a children’s hospital, as well as transportation providers, healthcare practices, emergency service providers, and educational institutions.In total, OFAC announced sanctions against 10 Iranians — Mansour Ahmadi; Ahmad Khatibi Aghda; Ali Agha-Ahmadi; Mohammad Agha Ahmadi; Mo’in Mahdavi; Aliakbar Rashidi-Barjini; Amir Hossein Nikaeen Ravari; Mostafa Haji Hosseini; Mojtaba Haji Hosseini; and, Mohammad Shakeri-Ashtijeh.OFAC also sanctioned two companies — Najee Technology Hooshmand Fater and Afkar System Yazd Company — where the hackers allegedly work. Officials from the Justice Department, State Department, FBI, U.S. Cyber Command, NSA and Cybersecurity and Infrastructure Security Agency said the men and the companies were “affiliated” with Iran’s Islamic Revolutionary Guard Corps (IRGC). All are now banned from doing business in the U.S. and three of the men — Mansour, Khatibi, and Nikaeen — were indicted by the U.S. Attorney’s Office for the District of New Jersey for their role in several attacks. “Ransom-related cyberattacks — like what happened here — are a particularly destructive form of cybercrime,” said U.S. Attorney Philip R. Sellinger for the District of New Jersey. In February 2021, the three hackers allegedly targeted the Union County township in New Jersey before attacking a Morris County, New Jersey accounting firm in February 2022.A month later, Khatibi demanded payment of $50,000 in cryptocurrency from another accounting firm that had been attacked. The indictment lists hundreds of other attacks where the three compromised, encrypted and extorted victims like a regional electric utility company based in Mississippi, a regional electric utility company based in Indiana and a public housing corporation in the State of Washington. The group also attacked a shelter for victims of domestic violence in Pennsylvania, securing a $13,000 payment; a county-level government in Wyoming; a construction company located in the State of Washington that was engaged in work on critical infrastructure projects; a state bar association, and even targets inside of Iran.All three men are facing about 20 years in jail but are based in Iran, making arrests unlikely. In an effort to collect tips on their whereabouts, the State Department added the three to its Rewards for Justice (RFJ) program.Under Secretary of the Treasury for Terrorism and Financial Intelligence Brian Nelson said ransomware groups associated with the IRGC are “threatening the physical security and economy of the United States and other nations.”“The Government of Iran has created a safe haven where cyber criminals acting for personal gain flourish and defendants like these are able to hack and extort victims, including critical infrastructure providers,” said Assistant Attorney General Matthew Olsen of the Justice Department’s National Security Division. “This indictment makes clear that even other Iranians are less safe because their own government fails to follow international norms and stop Iranian cyber criminals.”The agencies said organizations are “strongly discouraged from paying ransoms as doing so does not guarantee files and records will be recovered and may pose sanctions risks.”Eric Goldstein, Executive Assistant Director at CISA, implored organizations to address the vulnerabilities in the advisory and take other steps to protect systems. Jonathan Greig is a Breaking News Reporter at Recorded Future News. Jonathan has worked across the globe as a journalist since 2014. Before moving back to New York City, he worked for news outlets in South Africa, Jordan and Cambodia. He previously covered cybersecurity at ZDNet and TechRepublic.© Copyright 2023 | The Record from Recorded Future News"
   },
   {
      "time": "2022-09-15",
      "title": "Death of Queen Elizabeth II exploited to steal Microsoft credentials",
      "text": " Threat actors are exploiting the death of Queen Elizabeth II in phishing attacks to lure their targets to sites that steal their Microsoft account credentials.Besides Microsoft account details, the attackers also attempt to steal their victims' multi-factor authentication (MFA) codes to take over their accounts.In the campaign spotted by Proofpoint, the phishing actors impersonate \"the Microsoft team\" and try to bait the recipients into adding their memo onto an online memory board \"in memory of Her Majesty Queen Elizabeth II.\"After clicking a button embedded within the phishing email, the targets are instead sent to a phishing landing page where they're asked first to enter their Microsoft credentials.\"Messages contained links to a URL redirecting credential harvesting page targeting Microsoft email credentials including MFA collection,\" Proofpoint added.\"While the NCSC – which is a part of GCHQ – has not yet seen extensive evidence of this, as ever you should be aware it is a possibility and be attentive to emails, text messages, and other communications concerning the death of Her Majesty the Queen and arrangements for her funeral,\" the NCSC said.While this malicious activity seems limited, the NCSC has seen such phishing attacks and is currently investigating them.Sources have also told BleepingComputer that the NCSC is aware of phishing messages where the attackers attempt to trick potential victims into handing over sensitive information, including banking details.\"Cyber criminals often play on your emotions to get you to click, and may also refer to high profile current events,\" the agency added.\"The aim is often to make you visit a website, which may download a virus onto your computer, or steal bank details or other personal information.\""
   },
   {
      "time": "2022-09-15",
      "title": "CISA orders agencies to patch Windows, iOS bugs used in attacks",
      "text": " CISA added two new vulnerabilities to its list of security bugs exploited in the wild today, including a Windows privilege escalation vulnerability and an arbitrary code execution flaw affecting iPhones and Macs.The elevation of privileges bug in the Windows Common Log File System Driver is tracked as CVE-2022-37969, enabling local attackers to gain SYSTEM privileges following successful exploitation.\"We found this 0Day bug during a proactive Offensive Task Force exploit hunting mission. An escalation of privilege (EOP) exploit was found in the wild, exploiting this Common Log File System (CLFS) vulnerability,\" Dhanesh Kizhakkinan, Senior Principal Vulnerability Engineer at Mandiant, told BleepingComputer.\"The exploit seems to stand-alone and not part of a chain (like browser + EOP).\"This was the eighth zero-day used in the wild that Apple addressed since the start of the year, all of them most likely used only in highly-targeted attacks.CISA has given Federal Civilian Executive Branch Agencies (FCEB) agencies three weeks, until October 10th, to address these two security flaws and block attacks that could target their systems.\"These types of vulnerabilities are a frequent attack vector for malicious cyber actors and pose significant risk to the federal enterprise,\" CISA warned today.Since BOD 22-01 was issued, CISA has added over 800 security flaws to the catalog of bugs exploited in the wild, requiring federal agencies to address them on a tighter schedule to block attacks and potential security breaches."
   },
   {
      "time": "2022-09-15",
      "title": "Microsoft Teams stores auth tokens as cleartext in Windows, Linux, Macs",
      "text": " Security analysts have found a severe security vulnerability in the desktop app for Microsoft Teams that gives threat actors access to authentication tokens and accounts with multi-factor authentication (MFA) turned on.Microsoft Teams is a communication platform, included in the 365 product family, used by more than 270 million people for exchanging text messages, videoconferencing, and storing files.The newly discovered security issue impacts versions of the application for Windows, Linux, and Mac and refers to Microsoft Teams storing user authentication tokens in clear text without protecting access to them.An attacker with local access on a system where Microsoft Teams is installed could steal the tokens and use them to log into the victim's account.\"This attack does not require special permissions or advanced malware to get away with major internal damage,\" Connor Peoples at cybersecurity company Vectra explains in a report this week.The researcher adds that by taking \"control of critical seats–like a company's Head of Engineering, CEO, or CFO—attackers can convince users to perform tasks damaging to the organization.\"Vectra researchers discovered the problem in August 2022 and reported it to Microsoft. However, Microsoft did not agree on the severity of the issue and said that it doesn't meet the criteria for patching.Microsoft Teams is an Electron app, meaning that it runs in a browser window, complete with all the elements required by a regular web page (cookies, session strings, logs, etc.).Electron does not support encryption or protected file locations by default, so while the software framework is versatile and easy to use, it is not considered secure enough for developing mission-critical products unless extensive customization and additional work is applied.Vectra analyzed Microsoft Teams while trying to find a way to remove deactivated accounts from client apps, and found an ldb file with access tokens in clear text.Additionally, the analysts discovered that the \"Cookies\" folder also contained valid authentication tokens, along with account information, session data, and marketing tags.Finally, Vectra developed an exploit by abusing an API call that allows sending messages to oneself. Using SQLite engine to read the Cookies database, the researchers received the authentication tokens as a message in their chat window.The biggest concern is that this flaw will be abused by information-stealing malware that have become one of the most commonly distributed paylods in phishing campaigns.Using this type of malware, threat actors will be able to steal Microsoft Teams authentication tokens and remotely login as the user, bypassing MFA and gaining full access to the account.Information stealers are already doing this for other applications, such as Google Chrome, Microsoft Edge, Mozilla Firefox, Discord, and many more.With a patch unlikely to be released, Vectra's recommendation is for users to switch to the browser version of the Microsoft Teams client. By using Microsoft Edge to load the app, users benefit from additional protections against token leaks.The researchers advise Linux users to move to a different collaboaration suite, especially since Microsoft announced plans to stop supporting the app for the platform by December.For those that can't move to a different solution immediately, they can create a monitoring rule to discover processes accessing the following directories:BleepingComputer has contacted Microsoft about the company's plans to release a fix for the issue and will update the article when we get an answer.Update 9/14/22 - A Microsoft spokesperson sent us the following comment regarding Vectra's findings:The technique described does not meet our bar for immediate servicing as it requires an attacker to first gain access to a target network.We appreciate Vectra Protect’s partnership in identifying and responsibly disclosing this issue and will consider addressing in a future product release."
   },
   {
      "time": "2022-09-15",
      "title": "Lorenz Ransomware Exploit Mitel VoIP Systems to Breach Business Networks",
      "text": " The operators behind the Lornenz ransomware operation have been observed exploiting a now-patched critical security flaw in Mitel MiVoice Connect to obtain a foothold into target environments for follow-on malicious activities.Lorenz, like many other ransomware groups, is known for double extortion by exfiltrating data prior to encrypting systems, with the actor targeting small and medium businesses (SMBs) located in the U.S., and to a lesser extent in China and Mexico, since at least February 2021.In one Lorenz ransomware attack investigated by Arctic Wolf, the threat actors weaponized the remote code execution flaw to establish a reverse shell and download the Chisel proxy utility.What's also notable is that the Lorenz group waited for almost a month after obtaining initial access to conduct post-exploitation actions, including establishing persistence by means of a web shell, harvesting credentials, network reconnaissance, privilege escalation, and lateral movement.\"Monitoring just critical assets is not enough for organizations,\" the researchers said, adding \"security teams should monitor all externally facing devices for potential malicious activity, including VoIP and IoT devices.\"\"Threat actors are beginning to shift targeting to lesser known or monitored assets to avoid detection.\"Discover how application detection, response, and automated behavior modeling can revolutionize your defense against insider threats.Join the conversation to learn how to combat Zenbleed and Kubernetes attacks.Sign up for free and start receiving your daily dose of cybersecurity news, insights and tips."
   },
   {
      "time": "2022-09-15",
      "title": "Attackers mount Magento supply chain attack by compromising FishPig extensions - Help Net Security",
      "text": " FishPig, a UK-based company developing extensions for the popular Magento open-source e-commerce platform, has announced that its paid software offerings have been injected with malware after its distribution server was compromised.FishPig said that the compromise might have happened at any time after August 6. They did not say how the attackers managed to break into the the server – they might not be sure yet, in any case – but they do know that the attackers managed to inject malicious PHP code into the Helper/License.php file, which is included in most FishPig extensions.The injected malicious code installs the Rekoobe remote access trojan that, upon being launched, removes all malware files and runs in memory, Sansec researchers explained. Then it hides as a system process and waits for commands from a control server in Latvia.The only good news related to this Magento supply chain attack is that there’s no evidence that the compromised installations have been taken advantage of.“We expect that access to the affected stores may be sold in bulk on hacking forums,” Sansec threat researchers noted, and said that they have yet to detect follow-up abuse via the C2 server.The number of affected installations is unknown.FishPig is urging users to assume that all paid FishPig Magento 2 modules have been infected, and is advising them to upgrade all FishPig modules or reinstall existing versions from source.Sansec advises affected merchants to temporarily disable any paid FishPig extension, run a server-side malware scanner to detect the installed malware and, finally, to restart the server to terminate unauthorized background processes."
   },
   {
      "time": "2022-09-15",
      "title": "Cyberspies Drop New Infostealer Malware on Govt Networks in Asia - CySecurity News - Latest Information Security and Hacking Incidents",
      "text": "  your nameYour Emailyour message"
   }
]