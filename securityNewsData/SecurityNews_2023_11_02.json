[
   {
      "time": "2023-11-02",
      "title": "\r\n\t28 Countries Sign Bletchley Declaration on Responsible AI - Infosecurity Magazine\r\n",
      "text": " Reporter, Infosecurity MagazineAll these countries attended the UK’s AI Safety Summit, taking place in Bletchley Park, England, on November 1-2.The Declaration fulfills key summit objectives in establishing shared agreement and responsibility on the risks, opportunities and a forward process for international collaboration on frontier AI safety and research, particularly through greater scientific collaboration.“Many risks arising from AI are inherently international in nature, and so are best addressed through international cooperation,” reads a public statement published on November 1 by the UK Department for Science, Innovation and Technology (DSIT).The signatories have also agreed on the first two steps of their agenda for addressing ‘frontier AI’ risk. These are:The second step will mean the 28 signatories will “collaborate as appropriate while recognizing our approaches may differ based on national circumstances and applicable legal frameworks,” DSIT said.Prime Minister Rishi Sunak commented: “This is a landmark achievement that sees the world’s greatest AI powers agree on the urgency behind understanding the risks of AI – helping ensure the long-term future of our children and grandchildren.”Michelle Donelan, the UK’s Technology Secretary, insisted that the need for international collaboration on making AI safer has always been the UK’s position. “Bletchley Park marks the start of a long road ahead, and the Summit will kickstart an enduring process to ensure every nation and every citizen can realize the boundless benefits of AI,” she said.The 28 countries will also support an internationally inclusive network of scientific research on ‘frontier AI’ safety that encompasses and complements existing and new multilateral, plurilateral and bilateral collaboration, including through existing international fora and other relevant initiatives.Two future international events on AI safety will take place. South Korea is set to co-host a mini virtual summit on AI in the next six months and France will host the next in-person Summit in 2024."
   },
   {
      "time": "2023-11-02",
      "title": "\r\n\tPalo Alto Reveals New Features in Russian APT Turla's Kazuar Backdoor - Infosecurity Magazine\r\n",
      "text": " Reporter, Infosecurity MagazineThe latest version of the Kazuar backdoor could be more sophisticated than previously imagined, according to Palo Alto Networks.The Kazuar backdoor was used by the Russian hacking group Turla to target the Ukrainian defense sector in July 2023, the Ukrainian Computer Emergency and Response Team (CERT-UA) reported.Researchers from Unit 42, Palo Alto’s threat intelligence team, found previously undocumented features to Kazuar’s latest variant, a .NET backdoor that Turla uses as a second-stage payload, delivered together with other tools.Notable features, which are analyzed in detail in a report published on October 31, 2023, include the following:This version of Kazuar also supports over 40 distinct commands, half of which were previously undocumented.These new features show significant improvements to Kazuar’s code structure and functionality.Kazuar is a .NET backdoor developed and maintained by the Russian hacking group Turla. It was first discovered in 2017 by Unit 42.Since its discovery, Kazuar has been observed in the wild only a handful of times, mainly targeting organizations in the European government and military sectors.Before the outbreak of the war in Ukraine, Kazuar was last observed by Unit 42 researchers in late 2020. However, reports suggested the backdoor was under constant development.In July 2023, CERT-UA reported that a brand-new version of Kazuar was used as part of a multi-staged campaign targeting the Ukrainian defense sector. Kazuar was being used with other tools, such as the new Capibar first-stage backdoor.The threat group behind this variant was going after sensitive assets such as those found in Signal messages, source control and cloud platforms data.Turla, also known as Pensive Ursa, Uroboros, Venomous Bear, Waterbug or UNC4210, is a Russian-based, highly sophisticated advanced persistent threat (APT) group operating since at least 2004 with espionage and intelligence-gathering motivations.The group is linked to the Russian Federal Security Service (FSB).Turla has a long history of conducting cyber-espionage campaigns against various victims, spanning multiple sectors such as high-tech, pharmaceuticals, government, and retail.The group is known for using sophisticated malware and techniques, including custom backdoors, rootkits, and keyloggers. Turla is also known for its ability to maintain long-term access to victim networks, often for years.In recent years, Turla has been involved in several high-profile cyberattacks, including targeting the US Department of State, the US Department of Energy, and the French Ministry of Foreign Affairs. The group has also been linked to the hacking of the Democratic National Committee in 2016."
   },
   {
      "time": "2023-11-02",
      "title": "\r\n\tNHS Trust Slammed After IT Snafu Delays Thousands of Referrals - Infosecurity Magazine\r\n",
      "text": " UK / EMEA News Reporter, Infosecurity MagazineUK GDPR regulator the Information Commissioner’s Office (ICO) has reprimanded an NHS trust after an IT issue led to many crucial GP referrals going missing.The data protection infringement was first spotted at Derby’s Florence Nightingale Community Hospital, part of the University Hospitals of Derby and Burton NHS Foundation Trust (UHDB).UHDB was informed by NHS England as far back as 2019 of an issue with the national digital platform whereby referrals dropped off its worklist after 180 days. If not managed correctly, the information would be lost to the hospital altogether after 550 days, the ICO explained. This appears to have been the case with UHDB.Although NHS England provided staff with guidance on how to manage drop offs from the worklist using an internally generated report, no special training was provided to UHDB staff as this was considered to be a “routine task,” according to the reprimand.Some 4768 patients were impacted by the data handling error – 4199 of which had their referrals delayed. The remaining 569 referrals disappeared altogether, with some patients forced to wait for over two years for medical treatment to be provided, the ICO revealed.Although this represents only a small number of the 1.7 million referrals UHDB processes annually, ICO head of investigations, Natasha Longson, argued that this mishandling of healthcare data caused “unnecessary distress and disruption to patients,” and that the provider should have done better.Patient referrals from family doctors (GPs) to hospitals are a crucial cog in the NHS machine. The maximum wait time for non-urgent, consultant-led outpatient treatment is set at 18 weeks from the day the appointment is booked.Image credit: Ink Drop / Shutterstock.com"
   },
   {
      "time": "2023-11-02",
      "title": "\r\n\tNorth Korean Hackers Target macOS Crypto Engineers With Kandykorn - Infosecurity Magazine\r\n",
      "text": " Freelance JournalistNorth Korean hackers suspected to be associated with the Lazarus Group have been observed targeting blockchain engineers involved in cryptocurrency exchange platforms with a new macOS malware named Kandykorn. This intrusion, tracked as REF7001 by Elastic Security Labs, utilized a combination of custom and open source capabilities to gain initial access and post-exploitation on macOS systems.Writing in an advisory published today, the security experts said the intrusion began when attackers impersonated members of the blockchain engineering community on a public Discord server, convincing victims to download and decompress a ZIP archive containing malicious code. The victim believed they were installing an arbitrage bot to profit from cryptocurrency rate differences.The execution flow of REF7001 involved five stages:Initial Compromise: A Python application named Watcher.py was camouflaged as an arbitrage bot and was distributed in a .zip file titled “Cross-Platform Bridges.zip.”Dropper: TestSpeed.py and FinderTools were used as intermediate dropper scripts to download and execute Sugarloader.Payload: Sugarloader, an obfuscated binary, was used for initial access and as a loader for the final stage, Kandykorn.Loader: Hloader, a payload masquerading as the legitimate Discord application, was used as a persistence mechanism for loading Sugarloader.Payload: Kandykorn, the final stage of the intrusion, provided a full-featured set of capabilities for data access and exfiltration.The Kandykorn malware communicates with a command-and-control (C2) server using encrypted RC4 and utilizes a unique handshake mechanism, waiting for commands instead of polling for them. The Elastic report details various commands that Kandykorn can execute, including file upload and download, process manipulation and execution of arbitrary system commands."
   },
   {
      "time": "2023-11-02",
      "title": "\r\n\tMysterious Kill Switch Shuts Down Mozi IoT Botnet - Infosecurity Magazine\r\n",
      "text": " Freelance JournalistThe Mozi botnet, known for exploiting vulnerabilities in a large number of Internet of Things (IoT) devices, has been experienced a sudden decline in activity in August 2023. According to an advisory published by ESET security researchers today, the abrupt reduction in botnet activity was first detected in India on August 8 and later in China on August 16, marking a significant disruption to its operations.The company’s investigation unveiled a hidden kill switch on September 27 2023, which was responsible for the botnet’s decreased functionality. The control payload was identified inside a user datagram protocol (UDP) message, which lacked the traditional encapsulation of BitTorrent’s distributed sloppy hash table (BT-DHT) protocol. The kill switch demonstrated several functions, including disabling the parent process, disabling system services, replacing the original Mozi malware, executing configuration commands, disabling access to various ports and establishing the same foothold as the replaced original Mozi file.ESET identified two versions of the control payload, with the most recent version functioning as a container for the first with minor modifications. Even though the Mozi bots experienced a significant reduction in their capabilities, they still exhibited persistence, suggesting a deliberate and carefully executed takedown. The analysis revealed a substantial overlap between the botnet’s source code and the recently used binaries, including using the correct private keys to sign the control payload.This discovery has led to two potential hypotheses regarding the origin of the takedown: it could have been executed by the Mozi botnet creators or, alternatively, by Chinese law enforcement, compelling the cooperation of the creators. The sequential targeting of bots in India and China suggests a strategic and coordinated effort."
   },
   {
      "time": "2023-11-02",
      "title": "Researchers Expose Prolific Puma's Underground Link Shortening Service",
      "text": " A threat actor known as Prolific Puma has been maintaining a low profile and operating an underground link shortening service that's offered to other threat actors for at least over the past four years.A notable aspect of the threat actor's operations is the use of an American domain registrar and web hosting company named NameSilo for registration and name servers due to its affordability and an API that facilitates bulk registration.Prolific Puma, which does not advertise its shortening service on underground markets, has also been observed resorting to strategic aging to park registered domains for several weeks prior to hosting their service with anonymous providers.\"Prolific Puma domains are alphanumeric, pseudo-random, with variable length, typically 3 or 4 characters long, but we have also observed SLD labels as long as 7 characters,\" Infoblox explained.The real-world identity and origins of Prolific Puma remains unknown as yet. That said, multiple threat actors are said to be using the offering to take visitors to phishing and scam sites, CAPTCHA challenges, and even other shortened links created by a different service.In one instance of a phishing-cum-malware attack documented by Infoblox, victims clicking on a shortened link are taken to a landing page that requests them to provide personal details and make a payment, and ultimately infect their systems with browser plugin malware.\"Prolific Puma demonstrates how the DNS can be abused to support criminal activity and remain undetected for years,\" it said.The development also follows a new report from Trend Micro, which found that lesser-skilled cybercriminals are using a new tool called Kopeechka (meaning \"penny\" in Russian) to automate the creation of hundreds of fake social media accounts in just a few seconds.Kopeechka provides two types of different email addresses to help with the mass-registration process: email addresses hosted in 39 domains owned by the threat actor and those that are hosted on more popular email hosting services such as Gmail, Hotmail, Outlook, Rambler, and Zoho Mail.\"Kopeechka does not actually provide access to the actual mailboxes,\" Pernet explained. \"When users request for mailboxes to create social media accounts, they only get the email address reference and the specific email that contains the confirmation code or URL.\"It's suspected that these email addresses are either compromised or created by the Kopeechka actors themselves.With online services incorporating phone number verification to complete registration, Kopeechka enables its customers to choose from 16 different online SMS services, most of which originate from Russia.Besides accelerating cybercrime and equipping threat actors to launch full-fledged operations at scale, such tools – created as part of the \"as-a-service\" business model – highlight the professionalization of the criminal ecosystem.\"Kopeechka's services can facilitate an easy and affordable way to mass-create accounts online, which could be helpful to cybercriminals,\" Pernet said.\"While Kopeechka is mainly used for multiple accounts creation, it can also be used by cybercriminals who want to add a degree of anonymity to their activities, as they do not need to use any of their own email addresses to create accounts on social media platforms.\"Discover how application detection, response, and automated behavior modeling can revolutionize your defense against insider threats.Join the conversation to learn how to combat Zenbleed and Kubernetes attacks.Sign up for free and start receiving your daily dose of cybersecurity news, insights and tips."
   },
   {
      "time": "2023-11-02",
      "title": "Iranian Cyber Espionage Group Targets Financial and Government Sectors in Middle East",
      "text": " A threat actor affiliated with Iran's Ministry of Intelligence and Security (MOIS) has been observed waging a sophisticated cyber espionage campaign targeting financial, government, military, and telecommunications sectors in the Middle East for at least a year.Victims of the operation span various countries such as Saudi Arabia, the United Arab Emirates, Jordan, Kuwait, Oman, Iraq, and Israel.The activity represented by Scarred Manticore is characterized by the use of a previously unknown passive malware framework referred to as LIONTAIL that's installed on Windows servers. The threat actor is believed to be active since at least 2019.An advanced piece of malware, LIONTAIL is a collection of custom shellcode loaders and memory resident shellcode payloads. A noteworthy component of the framework is a lightweight-yet-sophisticated implant written in C that enables attackers to execute commands remotely via HTTP requests.The attack sequences entail infiltrating publicly facing Windows servers to kick off the malware delivery process and systematically harvest sensitive data from infected hosts.\"Instead of using the HTTP API, the malware uses IOCTLs to interact directly with the underlying HTTP.sys driver,\" the researchers said, detailing the command-and-control (C2) mechanism.\"This approach is stealthier as it doesn't involve IIS or HTTP API, which are usually closely monitored by security solutions, but is not a straightforward task given that the IOCTLs for HTTP.sys are undocumented and require additional research efforts by the threat actors.\"It's worth noting at this stage that the backdoor constituent of the LIONTAIL framework is the same as HTTPSnoop owing to the use of the HTTP.sys driver to extract payloads from incoming HTTP traffic.From a technical standpoint, one intriguing facet of the operation is that the threat actor employs a tailor-made implant for each compromised server, allowing the malicious activities to blend into the victim environment and make it hard to distinguish between suspicious and legitimate network traffic.Also deployed alongside LIONTAIL include various web shells and a web forwarder tool called LIONHEAD, a web forwarder.In a nutshell, WinTapix.sys acts as a loader to execute the next stage of the attack, injecting an embedded shellcode into a suitable user mode process that, in turn, executes an encrypted .NET payload specifically designed to target Microsoft Internet Information Services (IIS) servers.\"LIONTAIL framework components share similar obfuscation and string artifacts with FOXSHELL, SDD backdoor, and WINTAPIX drivers,\" Check Point said.\"Examining the history of their activities, it becomes evident how far the threat actor has come in improving their attacks and enhancing their approach which relies on passive implants.\"Discover how application detection, response, and automated behavior modeling can revolutionize your defense against insider threats.Join the conversation to learn how to combat Zenbleed and Kubernetes attacks.Sign up for free and start receiving your daily dose of cybersecurity news, insights and tips."
   },
   {
      "time": "2023-11-02",
      "title": "More Than 100 Vulns in Microsoft 365 Tied to SketchUp 3D Library",
      "text": " Microsoft's move to include support in Microsoft 365 for the SketchUp 3D Library in June 2022 appears to have introduced numerous vulnerabilities in the company's suite of cloud-based productivity and collaboration tools.Last December, researchers from Trend Micro's Zero-Day Initiative (ZDI) disclosed four high-severity remote code execution bugs in Microsoft 365 related to SketchUp file parsing. It was ZDI's research that prompted Zscaler's ThreatLabz investigation and subsequent discovery of the new set of bugs earlier this year.Microsoft did not immediately respond to a request seeking clarification on the current status of SketchUp support in Microsoft 365.SketchUp is one of the more widely used of seven formats that Microsoft 365 users can choose from to insert 3D files into Windows and Mac versions of Word, Excel, Outlook, and PowerPoint. The other formats include Binary GL Transmission Format (*.glb); Filmbox Format (*.fbx); Object Format (*.obj); and Polygon Format (*.ply). SketchUp was first developed by @Last Software in 2000, transitioned to Google in 2006, and now is owned by Trimble Navigation.Zscaler ThreatLabz researchers discovered the 117 SketchUp-related vulnerabilities when analyzing a dynamic link library that is responsible for parsing 3D file formats in Microsoft 365 apps, according to Kai Lu, a senior researcher with the security vendor. \"In particular, we discovered Microsoft leveraged a series of SketchUp C APIs to implement the functionality to parse an SKP file,\" Lu said, in his blog on discovering the vulnerabilities this week. Reverse-engineering the functionality led to the discovery of several exploitable issues in the software, the security researcher said.Copyright © 2023 Informa PLC Informa UK Limited is a company registered in England and Wales with company number 1072954 whose registered office is 5 Howick Place, London, SW1P 1WG."
   },
   {
      "time": "2023-11-02",
      "title": "CISA adds two F5 BIG-IP flaws to its Known Exploited Vulnerabilities catalog",
      "text": " F5 also released indicators-of-compromise (IoCs) to help defenders to identify potential compromises.CISA orders federal agencies to fix this flaw by November 21, 2023.\nCopyright@securityaffairs 2023 "
   },
   {
      "time": "2023-11-02",
      "title": "Arid Viper disguising mobile spyware as updates for non-malicious Android applications",
      "text": " The Android malware deployed in this malicious campaign extensively uses the same Firebase databases used by Skipped, however, both the malware and the non-malicious application use their own set of distinct credentials, including API keys and Client Application IDs. This observation indicates that the malware developers had access to the same Firebase project and backend database that are used by the non-malicious dating application, and generated their own set of credentials. Talos also considered, though assessed it was unlikely, that Skipped’s Firebase databases were configured in test mode, made publicly available, and abused by Arid Viper. Test mode allows a developer to quickly set up a database for testing purposes, which makes it available to everyone who knows the URL. This mode needs to be set when the database is first created and is only available for 30 days. After this duration, the database is locked and needs to be specifically re-configured to provide public access. The passive DNS data for the Skipped Firebase project’s domain shows that the URL for the database was first seen on August 9, 2021, while Arid Viper’s malware started using this infrastructure beginning on November 11, 2022. Given the malware used Skipped’s Firebase project almost a year after the infrastructure was set up (and well outside the 30 day window of public access), it is unlikely Arid Viper leveraged unintentional public access to the database.Furthermore, this mode does not provide any management capabilities for the overall Firebase project, but rather only provides data read and write capabilities to the backend database. The generation of API keys and registration of the Android malware for the project would still need to be provisioned on the project’s management console.Finally, Talos found no public evidence of the Firebase/Google Cloud project being compromised such that it may be used by any parties except the project’s original creators. This supports our assessment that Skipped developers likely shared their Firebase project with Arid Viper operators.As seen below, the malware used by Arid Viper in this campaign is very similar to remote access trojans (RATs) used by the threat actor in previous campaigns. The previous versions of the malware all allude to the Skipped application, either via references in Android package names or in the malware’s Graphical User Interface (GUI).Our analysis uncovered an extended web of companies that create dating-themed applications that are similar or identical to Skipped. Given the aforementioned connections between Arid Viper’s mobile malware and Skipped, we assess that Arid Viper operators may seek to leverage the infrastructure and/or names of these additional applications in future malicious campaigns.The publisher of Skipped, a company called “Skipped GmbH,” was registered and is headquartered in Germany, and appears to be linked to a multitude of seemingly non-malicious dating applications published by companies in Singapore and Dubai. We found that the domains used by these additional companies to distribute their dating applications, which are available on the Google and Apple application stores, were registered by Skipped GmbH.  Most of these applications provide their users with a chatting service, where no face-to-face interaction is possible. During these conversations, the application will interrupt and request the user buys “coins” in order to continue the interaction. This feature is notable as, if there is a current or potential connection between Arid Viper and these applications, it could generate revenue for the APT operators. The following online dating applications that are connected to Skipped GmbH can be installed from the Google Play Store or the Apple App Store:We were able to connect Skipped GmbH, the central entity in this ecosystem, to individual(s) operating under multiple monikers. Pivoting off the individual(s) we were able to identify at least three different yet related companies in Germany that author and distribute mobile applications that are usually dating-themed:Talos discovered multiple domains registered by Skipped GmbH that serve as product home pages and host artifacts like application service agreements. The applications that these domains pertain to are all romance and dating themed and are distributed on the App Stores using a variety of publisher entities. A high-level timeline of events for the companies, domains and applications involved in this ecosystem is shown below: All websites listed above use the exact same template to present their content, with minor variations in the content itself, captions and images. The websites provide links to download the application from application stores in the website footer. The legal agreement and publisher information on these sites, however, may not refer to Skipped GmbH. In fact, many of the websites list companies based out of different countries:Although there is a concrete connection between Skipped GmbH and the domains associated with these applications as evidenced by their domain registration information, it is currently unclear if there is a direct relationship between Skipped GmbH and the other developers listed above that distribute these applications. Talos produced a graph to map the connections between the application companies, domains, and websites, which can be seen below. This graph includes a connection to Arid Viper’s Android malware based on the malware’s overlapping use of Firebase with Skipped, as explained above. At the center of the graph lies Skipped GmbH, which is used for registering domains and establishing websites for the various dating applications. These applications and their websites are connected to additional developers and publishers located globally. For example, the “Joula” application is distributed by a company called “NYUTAINMENT PTE. LTD”, based out of Singapore. However, the domain for Joula, joula[.]app was registered by Skipped GmbH. Arid Viper’s latest campaign, which Talos observed occurring since at least April 2022, targets Arabic-speaking Android users through mobile malware that masquerades as application updates. Arid Viper has a history of disguising their malware as updates, either for dating applications or for popular messaging applications such as WhatsApp, Signal, or Telegram. The attackers typically send targets a link to a tutorial video for the application, which is posted on a media-sharing website like YouTube. The tutorial video will provide a step-by-step account of all features of the application and instructions on how to operate it in Arabic, suggesting a specific targeting of Arabic-speaking individuals. One such video depicts an individual narrating in Arabic in Levantine dialect. A URL is provided in the video’s description, which directs to an attacker-controlled domain that serves a copy of Arid Viper’s APK malware.Talos identified a YouTube account that hosted such a video. The account was created on March 17, 2022 and has uploaded only one video, suggesting Arid Viper may use such accounts to host a limited number of videos at a time. The video, as shown in the screen capture above, had approximately 50 views at the time of writing.As previously mentioned, some of the malware deployed in this campaign used Google’s Firebase platform as C2 infrastructure for the malicious applications. The Firebase platform primarily serves as a C2 channel to issue commands and to download and upload files. The platform also has the ability to provide a new C2 server address to the malware so that it can switch fr,m the Firebase platform to another attacker-controlled C2 host. One of the Firebase projects used by Arid Viper in this campaign dates back to 2021 and has some non-malicious mobile APKs associated with it, indicating operators have been trying to create, test and popularize other APK software out of the same account for years. Arid Viper’s Android malware has a number of features that enable the operators to surreptitiously collect sensitive information from victims’ devices and deploy additional executables. The malware uses native code to hide some of its activities, meaning it can leverage Android’s capability that allows for the execution of assembly-based shared libraries. Android applications can usually be built from Java code, however, for performance reasons, applications have the ability to load libraries which are compiled into native code (shared libraries). This native code is also harder to analyze and reverse engineer.Once deployed, the malware attempts to hide itself on a victim machine by disabling system or security notifications from the operating system. The malware completely disables notifications on Samsung mobile devices and on any device with an Android package that contains the word “security”. The malware makes notifications less visible on Huawei, Google, Oppo and Xiaomi mobile devices.This malware loads a library typically called “libuoil.so” or “libdalia.so”, which exports four main functions. Each of these functions will return the name of an administration package installed by vendors on their version of the Android Open Source Project (AOSP). These names will then be used to hide notifications from the security packages from the four vendors mentioned above. It is unclear why these vendors require a different obfuscation procedure since the code strings are not obfuscated in the native code library.The malware is configured to obtain a number of permissions from the infected device, including the ability to:These capabilities and the code used to implement them are explored in greater detail below.From the capability point of view, this RAT exhibits all the classic functionalities of an Android-based RAT including system fingerprinting, data exfiltration and payload deployment, to name a few.The malware has the capability to download additional malware, which is typically masquerading as updates for legitimate applications. It can also display notifications that specific applications have updates available, potentially prompting users to install the malicious updates. The malware has the capability to download, rename, and run the following applications:The malware can retrieve the following SIM information for dual SIM devices for each SIM:It can also retrieve the following battery information for the device:The malware can identify the manufacturer of the device if it is one of the following: It can get the following network information:Finally, the malware is able to retrieve additional information, including:The Android implant can ask the current C2 for an updated C2 domain and store it in its configuration, as shown below:It can also exfiltrate credentials collected from Facebook and relay them to the C2 server:The implant has the ability to record telephone calls made on the compromised device. This is done by recording the MIC audio source, capturing the recording to a specified location on disk, and subsequently uploading all files in the directory to the C2 server.The malware can also capture SMS messages received by the device, send new SMS messages, and make calls to phone numbers specified by the C2:Finally, the implant records the following information for all SMS messages stored on the compromised device:The malware can record contact information from the device and save it in a file in a folder specified by the implant:The implant has the ability to record the call history information on the compromised device and save it in a specific file and folder. This information can include: Finally, Arid Viper’s malware has the ability to copy all files with the following extensions in a specified directory to another directory for exfiltration to C2: jpg, jpeg, png, pdf, doc, docx, ppt, pptx, xls, mpp, accdb, xlsx, mdbWays our customers can detect and block this threat are listed below.d5e59be8ad9418bebca786b3a0a681f7e97ea6374f379b0c4352fee1219b3c298667482470edd4f7d484857fea5b560abe62553f299f25bb652f4c6baf697964D69cf49f703409bc01ff188902d88858a6237a2b4b0124d553a9fc490e8df68a1b6113f2faf070d078a643d77f09d4ca65410cf944a89530549fc1bebdb88c8c57fb9daf70417c3cbe390ac44979437c33802a049f7ab2d0e9b69f53763028c5f91e88dadc38e48215c81200920f0ac517da068ef00a75b1b67e3a0cd27a6552a8ca778c5852ae05344ac60b01ad7f43bb21bd8aa709ea1bb03d23bde3146885fb9306f6a0cacce21afd67d0887d7254172f61c7390fc06612c2ca9b55d28f80682b58cad9e815196b7d7ccf04ab7383a9bbf1f74e65679e6c708f2219b8692be0e2a101ede6ccc266d2f7b7068b813d65afa4a3f65cb0c19eb73716f67983f7f15a22d2bdfa42d2297bd03c43413b36849f78b55360f2ad013493912b13378aee7e5bd5254fff480f2b39bfc9dc17ccdad0b208ba59c010add52aee5187ed7fee98fd4db0b153832b1d64d4fea1af86aff152758fe6b19d01438bc9940f25169a7b9edddc3cd450aadc7340454465bd02c8619dda25c1ce8df12a87073e4a1f33ae5c96f8589cc8bcd2f5152ba360ca61f93ef406369966e69428989583a14eluis-dubuque[.]inharoldramsey[.]icudanny-cartwright[.]firm[.]inconner-margie[.]comjunius-cassin[.]comjunius-cassin[.]comhxxps[://]orin-weimann[.]com/abc/Update%20Services[.]apkhxxps[://]jack-keys[.]site/download/okOqphDhxxps[://]elizabeth-steiner[.]tech/download/HwIFlqthxxps[://]orin-weimann[.]com/abc/signal[.]apkhxxps[://]lightroom-61eb2[.]firebaseio[.]com/ hxxps[://]skippedtestinapp[.]firebaseio[.]com/Knowing the common scams is an important step in using the platform safely. The following recommendations help players not fall into scams.Cisco Talos assesses with high confidence that YoroTrooper, an espionage-focused threat actor first active in June 2022, likely consists of individuals from Kazakhstan based on their use of Kazakh currency and fluency in Kazakh and Russian.The threat actors behind the Qakbot malware have been conducting a campaign since early August 2023 in which they have been distributing Ransom Knight ransomware and the Remcos backdoor via phishing emails."
   },
   {
      "time": "2023-11-02",
      "title": "From Albania to the Middle East: The Scarred Manticore is Listening - Check Point Research",
      "text": " In the latest campaign, the threat actor leveraged the LIONTAIL framework, a sophisticated set of custom loaders and memory resident shellcode payloads. LIONSTAIL’s implants utilize undocumented functionalities of the HTTP.sys driver to extract payloads from incoming HTTP traffic. Multiple observed variants of LIONTAIL-associated malware suggest Scarred Manticore generates a tailor-made implant for each compromised server, allowing the malicious activities to blend into and be undiscernible from legitimate network traffic.The evolution in the tools and capabilities of Scarred Manticore demonstrates the progress the Iranian actors have undergone over the last few years. The techniques utilized in recent Scarred Manticore operations are notably more sophisticated compared to previous activities CPR has tied to Iran.In this article, we provide a technical analysis of the latest tools and the evolution of Scarred Manticore’s activity over time. This report details our understanding of Scarred Manticore, most notably its novel malware framework LIONTAIL, but also provides an overview of other toolsets we believe are used by the same actor, some of which were publicly exposed in the past. This includes, but is not limited to, tools used in the intrusion into the Albanian government infrastructure, web shells observed in high-profile attacks in the Middle East, and recently reported WINTAPIX driver-based implants.LIONTAIL is a malware framework that includes a set of custom shellcode loaders and memory resident shellcode payloads. One of its components is the LIONTAIL backdoor, written in C. It is a lightweight but rather sophisticated passive backdoor installed on Windows servers that enables attackers to execute commands remotely through HTTP requests. The backdoor sets up listeners for the list of URLs provided in its configuration and executes payloads from requests sent by attackers to those URLs.The LIONTAIL backdoor components are the main implants utilized in the latest Scarred Manticore intrusions. Utilizing access from a publicly facing server, the threat actor chains a set of passive implants to access internal resources. The internal instances of the LIONTAIL backdoors we’ve seen so far either listen on HTTP(s), similar to the internet-facing instances, or in some cases use named pipes to facilitate remote code execution.We observed 2 methods of backdoor installation on the compromised Windows servers: standalone executables, and DLLs loaded through search order hijacking by Windows services or legitimate processes.When installed as a DLL, the malware exploits the absence of some DLLs on Windows Server OS distributions: the backdoor is dropped to the system folder C:\\windows\\system32 as wlanapi.dll or wlbsctrl.dll. By default, neither of these exist on Windows Server installations. Depending on the Windows Server version, the malicious DLL is then loaded either directly by other processes, such as Explorer.exe, or the threat actors enable specific services, disabled by default, that require those DLLs.In the case of wlbsctrl.dll, the DLL is loaded at the start of the IKE and AuthIP IPsec Keying Modules service. For wlanapi.dll, the actors enable Extensible Authentication Protocol:sc.exe config Eaphost start=autosc.exe start EaphostIn instances where LIONTAIL is deployed as an executable, a noteworthy characteristic observed in some is the attempt to disguise the executable as Cyvera Console, a component of Cortex XDR.The malware starts by performing a one-byte XOR decryption of a structure containing the malware configuration, which is represented with the following structure:Many LIONTAIL samples contain tailor-made configurations, which add multiple other custom URLs that match existing web folders on the compromised server. As the URLs for the existing folders are already taken by the actual IIS service, the generated payloads contain additional random dictionary words in the path. These ensure the malware communication blends into legitimate traffic, helping to make it more inconspicuous.The host element of all prefixes in the configuration consists of a single plus sign (+), a “strong wildcard” that matches all possible host names. A strong wildcard is useful when an application needs to serve requests addressed to one or more relative URLs, regardless of how those requests arrive on the machine or what site (host or IP address) they specify in their Host headers.To understand how the malware configures listeners on those prefixes and how the approach changes with time, we pause for a short introduction to the Windows HTTP stack.A port-sharing mechanism, which allows multiple HTTP services to share the same TCP port and IP address, was introduced in Windows Server 2003. This mechanism is encapsulated within HTTP.sys, a kernel-mode driver that assumes the responsibility of processing HTTP requests, listens to incoming HTTP requests, and directs them to the relevant user-mode processes or services for further handling.The process of receiving and processing requests for specific URL prefixes by an application (or, in our case, malware) can be outlined as follows:First, the shellcode registers the URL prefixes with HTTP.sys using the following IOCTLs:After registering the URL prefixes, the backdoor initiates a loop responsible for handling the incoming requests. The loop continues until it gets the request from a URL equal to the end_string provided in the backdoor’s configuration.The backdoor receives requests from HTTP.sys using 0x124036 – UlReceiveHttpRequestIoctl IOCTL.The decrypted payload has the following structure:The malware creates a new thread and runs the shellcode in memory. For some reason, it uses shellcode_output and shellcode_output_size in the request message as pointers to the respective data in memory.To encrypt the response, the malware chooses a random byte, XOR-encodes the data using it as a key, prepends the key to the result, and then base64-encodes the entire result before sending it back to the C&C server using the IOCTL 0x12403F – UlSendHttpResponseIoctl.In addition to PE implant, Scarred Manticore uses a web shell-based version of the LIONTAIL shellcode loader. The web shell is obfuscated in a similar manner to other Scarred Manticore .NET payloads and web shells.The web shell gets requests with 2 parameters:Both parameters are encrypted the same way as other communication: XOR with the first byte followed by base64 encoding.The structure of shellcodes and of arguments sent to the web shell-based shellcode loader is identical to those used in the LIONTAIL backdoor, which suggests that the artifacts observed are part of a bigger framework that allows the dynamic building of loaders and payloads depending on the actor’s access and needs.During our research, we also found loaders that have a similar internal structure to the LIONTAIL samples. Instead of listening on URL prefixes, this version gets its payloads from a named pipe and likely is designated to be installed on internal servers with no access to the public web. The configuration of the malware is a bit different:It’s noteworthy that, unlike the HTTP version, the malware doesn’t employ any more advanced techniques for connecting to the named pipe, reading from it, and writing to it. Instead, it relies on standard kernel32.dll APIs such as CreateNamedPipe, and ReadFileWriteFile.The communication of named pipes-based LIONTAIL is identical to the HTTP version, with the same encryption mechanism and the same structure of the payload which runs as a shellcode in memory.After the LIONTAIL loader decrypts the payload and its argument received from the attackers’ C&C server, it starts with parsing the argument. It is a structure that describes a type of payload for the shellcode to execute and it is built differently depending on the type of payload:The argument for the API execution has the following structure:To make things more complicated, Scarred Manticore wraps the final payload in nested shellcodes. For example, one of the shellcodes received from the attackers runs another almost identical shellcode, which in turn runs a final shellcode responsible for machine fingerprinting.The data gathered by this payload is collected by running specific Windows APIs or enumerating the registry keys, and includes these components:The final structure, which contains all the gathered information, also has a place for error codes for the threat actor to use to figure out why some of the APIs they use don’t work as expected:In addition to using LIONTAIL, Scarred Manticore was observed leveraging other custom components.On some of the compromised exchange servers, the actors deployed LIONHEAD, a tiny web forwarder. LIONHEAD is also installed as a service using the same phantom DLL hijacking technique as LIONTAIL and utilizes similar mechanisms to forward the traffic directly to Exchange Web Services (EWS) endpoints.LIONHEAD’s configuration is different from LIONTAIL:The backdoor registers the listen_urls prefixes in the same way as LIONTAIL and listens for requests. For each request, the backdoor copies the content type, cookie, and body and forwards it to the <forward_server>/<forward_path>:<forward port> specified in the configuration. Next, the backdoor gets a response from forward_server and sends it back to the URL that received the original request.This forwarder might be used to bypass the restrictions on external connections to EWS, hide the real consumer of EWS data being external, and consequently conceal data exfiltration.Based on our visibility into the latest wave of attacks that utilize LIONTAIL, the observed victims are located across the Middle East region, including Saudi Arabia, the United Arab Emirates, Jordan, Kuwait, Oman, Iraq, and Israel. The majority of the impacted entities belong to government, telecommunications, military, and financial sectors, as well as IT services providers. However, we also observed the infection on the Exchange servers belonging to a regional affiliate of a global non-profit humanitarian network.The geographic region and the targeted profile are aligned with Iranian interests and in line with the typical victim profile that MOIS-affiliated clusters usually target in espionage operations.Since at least 2019, Scarred Manticore deployed unique tools on compromised Internet-facing Windows servers in the Middle East region. During these years, their toolset went through significant development. It began as open-source-based web-deployed proxies and over time evolved to become a diverse and powerful toolset that utilizes both custom-written and open-source components.The web shell used by the threat actor has the internal version Tunna v1.1g (only version 1.1a is available on Github). The most significant change from the open-source version is the encryption of requests and responses by XORing the data with the pre-defined string szEncryptionKey and appending the constant string K_SUFFIX at the end:Over time, the code was refactored and lost its resemblance to Tunna. We track this and all further versions as FOXSHELL.The biggest changes resulted from organizing multiple entities into classes using an objective-oriented approach. The following class structure persists in most of the FOXSHELL versions:All the functionality responsible for encrypting the traffic moved to a separate EncryptionModule class. This class loads a .NET DLL embedded in a base64-encoded string inside the body of FOXSHELL and invokes its encrypt and decrypt methods:The embedded encryption module’s name is XORO.dll, and its class Encryption.XORO implements decrypt and encrypt methods the same way as the Tunna-based web shell, using the same hardcoded values:All requests to the web shell are also encapsulated within a class called Package, which handles different PackageTypes: Data, Config, OK, Dispose, or Error. The PackageType is defined by the first byte of the package, and depending on the type of Package, the web shell parses the package and applies the configuration (opens a new socket to the remote machine specified in the configuration and applies a new EncryptionDll if provided), or disposes of the existing socket, or proxies the connection if the package is type Data:This version of the web shell is still unobfuscated, and its internal version is specified in the code:The web shell also contains the default EncryptionDll embedded inside. The module’s name is Base64.dll, and the encryption class, which is misspelled as Bsae64, exposes the encrypt and decrypt methods. However, both are just simple base64 encoding:Although this simple encoding could be done in the code of the web shell itself, the existence of other embedded DLLs, such as XORO.dll (described previously), and the ability to provide yet another EncryptionDll on the configuration stage, implies that the attackers prefer to control which specific type of encryption they want to use by default in certain environments.Other changes in this version are the renaming of the PackageType Config to RDPconfig, and ConfigPackage to RDPConfigPackage, indicating the actors are focused on proxying RDP connections. The code of these classes remains the same:Finally, another condition in the code handles the case of the web shell receiving a non-empty parameter WV-RESET, which calls a function to shut down the proxy socket and sends an OK response back to the attackers:The details of the samples may vary but in all of them, the FOXHELL is compiled as DLL and embedded inside the base web shell in base64. The compiled DLL is loaded with System.Reflection.Assembly.Load, and then the ProcessRequest method from it is invoked. The DLL is written in .NET and has the name pattern App_Web_<random>.dll, which indicates an ASP.NET dynamically compiled DLL.The App_Web* DLL is affected by the class and method obfuscation, and all the strings are encrypted with a combination of Base64, XOR with the first byte, and AES:When the web shell is compiled into DLL, it contains the initialization stub, which ensures that the web shell listens on the correct URI. In this case, the initialization happens in the following piece of code:Or, after deobfuscation:This initialization sets the FOXSHELL to listen to the requests on the relative path ~/1.aspx, which we observed as an unused artifact in other web shells related to attacks involving LIONTAIL.Internally, the DLL has the same “1.5” version of FOXSHELL, which includes the WV-RESET parameter to stop the proxy and the same default Bsae64 Encryption DLL as in previous versions.C&C CommunicationThe SSD backdoor sets up C&C communication through an HTTP listener on the infected machine. It is achieved using two classes:ServerManager is used to extract the sites hosted by the IIS server and build the HashSet of URL prefixes to listen on:In this specific case, the only relative URI configured in the malware sample is Temporary_Listen_Addresses. The malware then uses the HttpListener class to start listening on the specified URL prefixes:C&C command executionThe backdoor has several capabilities: execute commands using cmd.exe, upload and download files, execute processes with specified arguments, and run additional .NET assemblies.First, if the POST request body contains data, the malware parses it and handles the message as one of the 4 commands it supports. Otherwise, if the request contains a parameter Vet, the malware simply decodes its value from base64 and executes it with cmd /c. If none of these is true, then the malware handles the heartbeat mechanism: if the request URL contains the string wOxhuoSBgpGcnLQZxipa in lowercase, then the malware sends back UsEPTIkCRUwarKZfRnyjcG13DFA along with a 200 OK response.The data from the POST request is encrypted using Base64 and simple XOR-based encryption:After decrypting the data of the message, the malware parses it according to the following order:The possible commands, as named by the threat actors, include:The response data is built the same way as the request (returns command type, command name, and output) and then encrypted with the same XOR-based algorithm as the request.The final payload is obfuscated with a commercial obfuscator in addition to already familiar class, method, and string obfuscations, and it combines the functionality of the SDD backdoor and FOXSHELL proxy. To achieve both, it listens on two sets of URL prefixes, using ServerManager and HTTPListener similarly to the SSD backdoor.LIONTAIL framework components share similar obfuscation and string artifacts with FOXSHELL, SDD backdoor, and WINTAPIX drivers. Currently, we are not aware of any other threat actors utilizing these tools, and we attribute them all to Scarred Manticore based on multiple code overlaps and shared victimology.For the last few years, Scarred Manticore has been observed carrying out multiple stealthy operations in Middle Eastern countries, including gaining access to telecommunications and government organizations in the region, and maintaining and leveraging this access for months to systematically exfiltrate data from the victims’ systems. Examining the history of their activities, it becomes evident how far the threat actor has come in improving their attacks and enhancing their approach which relies on passive implants.While LIONTAIL represents a logical progression in the evolution of FOXSHELL and still bears some distinctive characteristics that allow us to attribute attacks involving LIONTAIL to Scarred Manticore, it stands out from other observed variants. The LIONTAIL framework does not use common, usually monitored methods for implementing listeners: it no longer depends on Internet Information Services (IIS), its modules, or any other options and libraries provided by the .NET framework to manage IIS programmatically. Instead, it utilizes the lowest level of Windows HTTP Stack by interacting directly with the HTTP.sys driver. In addition, it apparently allows the threat actors to customize the implants, their configuration parameters, and loaders’ file delivery type. All those have enhanced the stealth ability of the implants, enabling them to evade detection for an extended period.We expect that Scarred Manticore operations will persist and may spread into other regions as per Iranian long-term interests. While most of the recent activity of Scarred Manticore is primarily focused on maintaining covert access and data extraction, the troubling example of the attack on the Albanian government networks serves as a reminder that nation-state actors may collaborate and share access with their counterparts in intelligence agencies.IPS:Backdoor.WIN32.Liontail.A/BThreat Emulation:APT.Wins.Liontail.C/DSubscribe for cpr blogs, news and more© 1994- Check Point Software Technologies LTD. All rights reserved.First Name\nLast Name\nCountry—Please choose an option—ChinaIndiaUnited StatesIndonesiaBrazilPakistanNigeriaBangladeshRussiaJapanMexicoPhilippinesVietnamEthiopiaEgyptGermanyIranTurkeyDemocratic Republic of the CongoThailandFranceUnited KingdomItalyBurmaSouth AfricaSouth KoreaColombiaSpainUkraineTanzaniaKenyaArgentinaAlgeriaPolandSudanUgandaCanadaIraqMoroccoPeruUzbekistanSaudi ArabiaMalaysiaVenezuelaNepalAfghanistanYemenNorth KoreaGhanaMozambiqueTaiwanAustraliaIvory CoastSyriaMadagascarAngolaCameroonSri LankaRomaniaBurkina FasoNigerKazakhstanNetherlandsChileMalawiEcuadorGuatemalaMaliCambodiaSenegalZambiaZimbabweChadSouth SudanBelgiumCubaTunisiaGuineaGreecePortugalRwandaCzech RepublicSomaliaHaitiBeninBurundiBoliviaHungarySwedenBelarusDominican RepublicAzerbaijanHondurasAustriaUnited Arab EmiratesIsraelSwitzerlandTajikistanBulgariaHong Kong (China)SerbiaPapua New GuineaParaguayLaosJordanEl SalvadorEritreaLibyaTogoSierra LeoneNicaraguaKyrgyzstanDenmarkFinlandSlovakiaSingaporeTurkmenistanNorwayLebanonCosta RicaCentral African RepublicIrelandGeorgiaNew ZealandRepublic of the CongoPalestineLiberiaCroatiaOmanBosnia and HerzegovinaPuerto RicoKuwaitMoldovMauritaniaPanamaUruguayArmeniaLithuaniaAlbaniaMongoliaJamaicaNamibiaLesothoQatarMacedoniaSloveniaBotswanaLatviaGambiaKosovoGuinea-BissauGabonEquatorial GuineaTrinidad and TobagoEstoniaMauritiusSwazilandBahrainTimor-LesteDjiboutiCyprusFijiReunion (France)GuyanaComorosBhutanMontenegroMacau (China)Solomon IslandsWestern SaharaLuxembourgSurinameCape VerdeMaltaGuadeloupe (France)Martinique (France)BruneiBahamasIcelandMaldivesBelizeBarbadosFrench Polynesia (France)VanuatuNew Caledonia (France)French Guiana (France)Mayotte (France)SamoaSao Tom and PrincipeSaint LuciaGuam (USA)Curacao (Netherlands)Saint Vincent and the GrenadinesKiribatiUnited States Virgin Islands (USA)GrenadaTongaAruba (Netherlands)Federated States of MicronesiaJersey (UK)SeychellesAntigua and BarbudaIsle of Man (UK)AndorraDominicaBermuda (UK)Guernsey (UK)Greenland (Denmark)Marshall IslandsAmerican Samoa (USA)Cayman Islands (UK)Saint Kitts and NevisNorthern Mariana Islands (USA)Faroe Islands (Denmark)Sint Maarten (Netherlands)Saint Martin (France)LiechtensteinMonacoSan MarinoTurks and Caicos Islands (UK)Gibraltar (UK)British Virgin Islands (UK)Aland Islands (Finland)Caribbean Netherlands (Netherlands)PalauCook Islands (NZ)Anguilla (UK)Wallis and Futuna (France)TuvaluNauruSaint Barthelemy (France)Saint Pierre and Miquelon (France)Montserrat (UK)Saint Helena, Ascension and Tristan da Cunha (UK)Svalbard and Jan Mayen (Norway)Falkland Islands (UK)Norfolk Island (Australia)Christmas Island (Australia)Niue (NZ)Tokelau (NZ)Vatican CityCocos (Keeling) Islands (Australia)Pitcairn Islands (UK)\nEmail\n\nBFSI uses cookies on this site. We use cookies to enable faster and easier experience for you. By continuing to visit this website you agree to our use of cookies."
   },
   {
      "time": "2023-11-02",
      "title": "Over the Kazuar’s Nest: Cracking Down on a Freshly Hatched Backdoor Used by Pensive Ursa (Aka Turla)",
      "text": " October 31, 2023 at 6:00 AMWhile tracking the evolution of Pensive Ursa (aka Turla, Uroburos), Unit 42 researchers came across a new, upgraded variant of Kazuar. Not only is Kazuar another name for the enormous and dangerous cassowary bird, Kazuar is an advanced and stealthy .NET backdoor that Pensive Ursa usually uses as a second stage payload.As the code of the upgraded revision of Kazuar reveals, the authors put special emphasis on Kazuar’s ability to operate in stealth, evade detection and thwart analysis efforts. They do so using a variety of advanced anti-analysis techniques and by protecting the malware code with effective encryption and obfuscation practices.Palo Alto Networks customers receive protections from and mitigations for the threats mentioned in this article in the following ways:Kazuar is known for being an advanced and stealthy .NET backdoor that Pensive Ursa usually uses as a second stage payload, delivered together with other tools that the threat group commonly uses.This post will detail previously undocumented features, including:Since at least 2018, variants of Kazuar changed their obfuscation methods and methodically modified its compilation timestamps. Some variants used the ConfuserEx obfuscator to encrypt strings, and others used a custom method. In the Kazuar variant analyzed in this blog, the authors went a step further, implementing multiple custom methods for string encryption.Unlike with previous variants, the authors only focused on targeting the Windows operating system.Kazuar also contains hard-coded, hashed identifiers for the Agent version and BuildID as well as an Agent label. These can be used as variant identifiers, as shown in Figure 1.This check appears to be a simple form of an anti-analysis mechanism, to ensure that the execution of the malware was done by the intended loader and not by other means or software.Kazuar will execute if its filename matches a specific hard-coded hashed name (using the FNV algorithm). This behavior is probably meant for debugging purposes, letting the authors avoid using the loader each time they debug the malware.It is also worth mentioning that there is a currently unreferenced option to create a file called wordlist in the code. This file could give us a clue about a feature not yet implemented, perhaps using a wordlist for directories, filenames or password brute forcing.The malware creates a separate main configuration file that includes data including the following:Kazuar is using a mutex to check its injection into another process. Kazuar generates its mutex name by XORing the current process ID with the hard-coded value 0x4ac882d887106b7d and then XORing it with the machine's GUID, as depicted in Figure 5. This means that several Kazuars can operate in tandem on the same device, just not injected into the same process.The new version of Kazuar uses what it describes in the configuration as “injection modes” as shown in Table 1. The default mode is inject.Table 1. Kazuar injection modes and descriptions.In zombify mode, Kazuar is injected into the user’s default browser and has a fallback mechanism to inject itself to svchost.exe in case the query for the default browser fails. Figure 6 shows that the term zombify addresses process injection in general by Kazuar’s authors.Kazuar operates in a multithreading model, while each of Kazuar’s main functionalities operates as its own thread. In other words, one thread handles receiving commands or tasks from its C2, while a solver thread handles execution of these commands. This multithreading model enables Kazuar’s authors to establish an asynchronous and modular flow control. Figure 7 shows the task solver flow.Kazuar receives new tasks, solves them and writes the output into result files. A solver thread is handling new tasks received from the C2 servers or another Kazuar node. The task content is then encrypted and written to disk into a task file.Each task file implements a hybrid encryption scheme:As shown in Figure 8, once a task is complete, the generated result file will be saved to disk.In addition to the aforementioned encrypted data, Kazuar writes the following fields to the beginning of the result file:Figure 9 shows the encrypted result file content from disk.Kazuar’s code includes a high volume of strings that are related to functionality and debugging. When revealed in plain text, they shed light on the inner workings and functionality of Kazuar. To avoid the scenario of researchers creating strings-based indicative YARA and hunting rules, Kazuar’s strings are encrypted. It decrypts each string at runtime.Figure 11 shows a loop iterating over a given string, and checking if the ordinal value of a given character is in the dictionary keys of the relevant class. If it is, Kazuar swaps the key and value and appends it to the crafted string. Otherwise, it keeps the original character.In addition to the string obfuscation, the authors have given unmeaningful names to the classes and methods in the code, to make analysis more difficult.One of the strings decoded by Kazuar returns the value “Invalid pong responce” as shown in Figure 12. It seems that one of the malware coders forgot to switch the Russian C for an English S.Kazuar supports 45 different tasks it can receive from its C2, as shown in Table 2. This is yet another development in Kazuar’s code, as previous research hadn’t documented some of these tasks. By comparison, Kazuar’s first variant analyzed back in 2017 supported only 26 C2 commands.We have grouped Kazuar’s commands into the following categories:Table 2. Kazuar’s supported C2 commands.Kazuar has the capability to attempt to steal credentials from many artifacts in the infected computer, by receiving the commands steal or unattend from the C2.These artifacts include multiple well-known cloud applications.Besides the two aforementioned text files, as part of this task, the malware takes a screenshot of the user’s screen. Figure 15 shows the zipping of all of these files into one archive before being encrypted and sent to the C2.Kazuar has the ability to set up automated tasks that will run at specified intervals to gather information from the infected machines. Figure 16 shows an example of this functionality as documented in Kazuar’s configuration.These automated tasks include the following:Kazuar has the ability to let attackers set up what they called “peep rules” in the configuration. Although Kazuar does not come with these rules set out of the box, according to the malware’s code, it appears that this functionality enables the attacker to monitor the windows of specified processes. This allows the attacker to track user activity of interest on the compromised machine.Prior to establishing a communication channel with a C2 server, and in addition to the aforementioned anti-analysis checks, Kazuar checks the configuration data-sending time intervals. This check includes determining whether it should send data over the weekend or not.Upon first communication, Kazuar sends the collected data (described in the Comprehensive System Profiling section) in an XML format and expects to get an XML structured response back with a new task. Figure 17 shows the HTTP request.Kazuar uses a hard-coded value 169739e7-2112-9514-6a61-d300c0fef02d casted to a string and Base64 encoded as the cookie.Kazuar generates key names for the XML and Base64 encrypts the content prior to sending it to the C2. The content of the XML contains:Kazuar uses these pipes to establish peer-to-peer communication between different Kazuar instances, configuring each as a server or a client. The named pipe communication supports the remote requests shown in Table 3.Table 3. Kazuar requests and responses using named pipes.Kazuar uses multiple anti-analysis techniques based on a series of elaborate checks, to ensure it is not being analyzed. The authors programmed Kazuar to either continue if the coast is clear, or to remain idle and cease all C2 communication if it is being debugged or analyzed. We can group these checks into three main categories: honeypot, analysis tools and sandbox.Kazuar checks if it has set the antidump_methods setting to true, then overrides the pointers to its custom methods, while ignoring generic .NET methods, essentially wiping them from memory (as Kazuar’s logged message states). This ultimately prevents researchers from dumping an intact version of the malware.One of the first things Kazuar specifically searches for is the existence of Kaspersky honeypot artifacts on the machine. It uses a hard-coded list of specific process names and filenames to do this.If Kazuar finds more than five of these files or processes, it will log that it found a Kaspersky honeypot. Figure 18 shows these filenames.Kazuar has a list of hard-coded names of different popular analysis tools such as the following:Kazuar collects and parses events from the Windows event logs. Figure 19 shows Kazuar specifically looking for events from the following antivirus/security vendors:Same as with checking for Kaspersky’s honeypot, a plausible explanation would be that these security products are popular with their victims.We examined the newest Kazuar malware variant that we detected in the wild. Notable features include the following:All the aforementioned features are designed to provide the Kazuar backdoor a high level of stealth. Other noteworthy characteristics of this malware are:This version of Kazuar also supports an array of over 40 distinct commands, half of which were previously undocumented.We encourage security practitioners and defenders to study this report and use the information provided to enhance current detection, prevention and hunting practices to overall strengthen their security posture.Execution of native code by Kazuar for process injection and WMI execution triggered several alerts, as well as other suspicious and uncharacteristic activity carried out by explorer.exe. We detailed the alerts, including the alert shown in Figure 20, in Figure 21 below.Finally, Figure 23 shows that when in prevent mode, Cortex XDR prevents the Kazuar malware executable and triggers the alert pop-up accordingly.The Cortex XDR platform detects and prevents the execution flow described in the screenshots included in the previous section.For Palo Alto Networks customers, our products and services provide the following coverage associated with this group.Cortex XDR and XSIAM build behavioral profiles of user activity over time with machine learning. By comparing new activity to past activity, peer activity and the expected behavior of the entity, Cortex XDR and XSIAM detect anomalous activity indicative of credential-based attacks.It also offers the following protections related to the attacks discussed in this post:Kazuar SHA256Command and Control ServersRSA Keys Sign up to receive the latest news, cyber threat intelligence and research from usPlease enter your email address!Please mark, I'm not a robot!© 2023 Palo Alto Networks, Inc. All rights reserved."
   }
]