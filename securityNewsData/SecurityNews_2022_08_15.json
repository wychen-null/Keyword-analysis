[
   {
      "time": "2022-08-15",
      "title": "Process injection: breaking all macOS security layers with a single vulnerability · Sector 7",
      "text": " If you have created a new macOS app with Xcode 13.2, you may noticed this new method in the template:This was added to the Xcode template to address a process injection vulnerability we reported!In October 2021, Apple fixed CVE-2021-30873. This was a process injection vulnerability affecting (essentially) all macOS AppKit-based applications. We reported this vulnerability to Apple, along with methods to use this vulnerability to escape the sandbox, elevate privileges to root and bypass the filesystem restrictions of SIP. In this post, we will first describe what process injection is, then the details of this vulnerability and finally how we abused it.This research was also published at Black Hat USA 2022 and DEF CON 30.Process injection is the ability for one process to execute code in a different process. In Windows, one reason this is used is to evade detection by antivirus scanners, for example by a technique known as DLL hijacking. This allows malicious code to pretend to be part of a different executable. In macOS, this technique can have significantly more impact than that due to the difference in permissions two applications can have.In the classic Unix security model, each process runs as a specific user. Each file has an owner, group and flags that determine which users are allowed to read, write or execute that file. Two processes running as the same user have the same permissions: it is assumed there is no security boundary between them. Users are security boundaries, processes are not. If two processes are running as the same user, then one process could attach to the other as a debugger, allowing it to read or write the memory and registers of that other process. The root user is an exception, as it has access to all files and processes. Thus, root can always access all data on the computer, whether on disk or in RAM.This was, in essence, the same security model as macOS until the introduction of SIP, also known as “rootless”. This name doesn’t mean that there is no root user anymore, but it is now less powerful on its own. For example, certain files can no longer be read by the root user unless the process also has specific entitlements. Entitlements are metadata that is included when generating the code signature for an executable. Checking if a process has a certain entitlement is an essential part of many security measures in macOS. The Unix ownership rules are still present, this is an additional layer of permission checks on top of them. Certain sensitive files (e.g. the Mail.app database) and features (e.g. the webcam) are no longer possible with only root privileges but require an additional entitlement. In other words, privilege escalation is not enough to fully compromise the sensitive data on a Mac.For example, using the following command we can see the entitlements of Mail.app:In the output, we see the following entitlement:This is what grants Mail.app the permission to read the SIP protected mail database, while other malware will not be able to read it.Aside from entitlements, there are also the permissions handled by Transparency, Consent and Control (TCC). This is the mechanism by which applications can request access to, for example, the webcam, microphone and (in recent macOS versions) also files such as those in the Documents and Download folders. This means that even applications that do not use the Mac Application sandbox might not have access to certain features or files.Of course entitlements and TCC permissions would be useless if any process can just attach as a debugger to another process of the same user. If one application has access to the webcam, but the other doesn’t, then one process could attach as a debugger to the other process and inject some code to steal the webcam video. To fix this, the ability to debug other applications has been heavily restricted.Changing a security model that has been used for decades to a more restrictive model is difficult, especially in something as complicated as macOS. Attaching debuggers is just one example, there are many similar techniques that could be used to inject code into a different process. Apple has squashed many of these techniques, but many other ones are likely still undiscovered.More dangerous than a process injection vulnerability in one application is a process injection technique that affects multiple, or even all, applications. This would give access to a large number of different entitlements and TCC permissions. A generic process injection vulnerability affecting all applications is a very powerful tool, as we’ll demonstrate in this post.When shutting down a Mac, it will prompt you to ask if the currently open windows should be reopened the next time you log in. This is a part of functionally called “saved state” or “persistent UI”.When reopening the windows, it can even restore new documents that were not yet saved in some applications.It is used in more places than just at shutdown. For example, it is also used for a feature called App Nap. When application has been inactive for a while (has not been the focused application, not playing audio, etc.), then the system can tell it to save its state and terminates the process. macOS keeps showing a static image of the application’s windows and in the Dock it still appears to be running, while it is not. When the user switches back to the application, it is quickly launched and resumes its state. Internally, this also uses the same saved state functionality.When building an application using AppKit, support for saving the state is for a large part automatic. In some cases the application needs to include its own objects in the saved state to ensure the full state can be recovered, for example in a document-based application.Each time an application loses focus, it writes to the files:The windows.plist file contains a list of all of the application’s open windows. (And some other things that don’t look like windows, such as the menu bar and the Dock menu.)For example, a windows.plist for TextEdit.app could look like this:For example:Whenever an application is launched, AppKit will read these files and restore the windows of the application. This happens automatically, without the app needing to implement anything. The code for reading these files is quite careful: if the application crashed, then maybe the state is corrupted too. If the application crashes while restoring the state, then the next time the state is discarded and it does a fresh start.The vulnerability we found is that the encrypted serialized object stored in the data.data file was not using “secure coding”. To explain what that means, we’ll first explain serialization vulnerabilities, in particular on macOS.Many object-oriented programming languages have added support for binary serialization, which turns an object into a bytestring and back. Contrary to XML and JSON, these are custom, language specific formats. In some programming languages, serialization support for classes is automatic, in other languages classes can opt-in.In many of those languages these features have lead to vulnerabilities. The problem in many implementations is that an object is created first, and then its type is checked. Methods may be called on these objects when creating or destroying them. By combining objects in unusual ways, it is sometimes possible to gain remote code execution when a malicious object is deserialized. It is, therefore, not a good idea to use these serialization functions for any data that might be received over the network from an untrusted party.In Objective-C, classes can implement the NSCoding protocol to be serializable. Subclasses of NSCoder, such as NSKeyedArchiver and NSKeyedUnarchiver, can be used to serialize and deserialize these objects.How this works in practice is as follows. A class that implements NSCoding must include a method:In this method, this object can use coder to decode its instance variables, using methods such as -decodeObjectForKey:, -decodeIntegerForKey:, -decodeDoubleForKey:, etc. When it uses -decodeObjectForKey:, the coder will recursively call -initWithCoder: on that object, eventually decoding the entire graph of objects.A protocol that enables encoding and decoding in a manner that is robust against object substitution attacks.This means that instead of creating an object first and then checking its type, a set of allowed classes needs to be included  when decoding an object.So instead of the unsafe construction:The following must be used:This means that when a secure coder is created, -decodeObjectForKey: is no longer allowed, but -decodeObjectOfClass:forKey: must be used.That makes exploitable vulnerabilities significantly harder, but it could still happen. One thing to note here is that subclasses of the specified class are allowed. If, for example, the NSObject class is specified, then all classes implementing NSCoding are still allowed. If only NSDictionary are expected and an imported framework contains a rarely used and vulnerable subclass of NSDictionary, then this could also create a vulnerability.In all of Apple’s operating systems, these serialized objects are used all over the place, often for inter-process exchange of data. For example, NSXPCConnection heavily relies on secure serialization for implementing remote method calls. In iMessage, these serialized objects are even exchanged with other users over the network. In such cases it is very important that secure coding is always enabled.In the data.data file for saved states, objects were stored using an NSKeyedArchiver without secure coding enabled. This means we could include objects of any class that implements the NSCoding protocol. The likely reason for this is that applications can extend the saved state with their own objects, and because the saved state functionality is older than NSSecureCoding, Apple couldn’t just upgrade this to secure coding, as this could break third-party applications.By decompiling a large number of -initWithCoder: methods in AppKit, we eventually found a combination of 2 objects that we could use to call arbitrary Objective-C methods on another deserialized object.We start with NSRuleEditor. The -initWithCoder: method of this class creates a binding to an object from the same archive with a key path also obtained from the archive.This binds the property binding of the receiver to the keyPath of observable. A keypath a string that can be used, for example, to access nested properties of the object. But the more common method for creating bindings is by creating them as part of a XIB file in Xcode.For example, suppose the model is a class Person, which has a property @property (readwrite, copy) NSString *name;. Then you could bind the “value” of a text field to the “name” keypath of a Person to create a field that shows (and can edit) the person’s name.In the XIB editor, this would be created as follows:In this case we use it to call -draw on the next object.The next object we use is an NSCustomImageRep object. This obtains a selector (a method name) as a string and an object from the archive. When the -draw method is called, it invokes the method from the selector on the object. It passes itself as the first argument:By deserializing these two classes we can now call zero-argument methods and multiple argument methods, although the first argument will be an NSCustomImageRep object and the remaining arguments will be whatever happens to still be in those registers. Nevertheless, is a very powerful primitive. We’ll cover the rest of the chain we used in a future blog post.First of all, we escaped the Mac Application sandbox with this vulnerability. To explain that, some more background on the saved state is necessary.In a sandboxed application, many files that would be stored in ~/Library are stored in a separate container instead. So instead of saving its state in:Sandboxed applications save their state to:Apparently, when the system is shut down while an application is still running (when the prompt is shown asking the user whether to reopen the windows the next time), the first location is symlinked to the second one by talagent. We are unsure of why, it might have something to do with upgrading an application to a new version which is sandboxed.Secondly, most applications do not have access to all files. Sandboxed applications are very restricted of course, but with the addition of TCC even accessing the Downloads, Documents, etc. folders require user approval. If the application would open an open or save panel, it would be quite inconvenient if the user could only see the files that that application has access to. To solve this, a different process is launched when opening such a panel: com.apple.appkit.xpc.openAndSavePanelService. Even though the window itself is part of the application, its contents are drawn by openAndSavePanelService. This is an XPC service which has full access to all files. When the user selects a file in the panel, the application gains temporary access to that file. This way, users can still browse their entire disk even in applications that do not have permission to list those files.As it is an XPC service with service type Application, it is launched separately for each app.What we noticed is that this XPC Service reads its saved state, but using the bundle ID of the app that launched it! As this panel might be part of the saved state of multiple applications, it does make some sense that it would need to separate its state per application.As it turns out, it reads its saved state from the location outside of the container, but with the application’s bundle ID:But as we mentioned if the app was ever open when the user shut down their computer, then this will be a symlink to the container path.Thus, we can escape the sandbox in the following way:The com.apple.appkit.xpc.openAndSavePanelService process will now deserialize the malicious object, giving us code execution in a non-sandboxed process.This was fixed earlier than the other issues, as CVE-2021-30659 in macOS 11.3. Apple addressed this by no longer loading the state from the same location in com.apple.appkit.xpc.openAndSavePanelService.Some applications have an entitlement of com.apple.private.AuthorizationServices containing the value system.install.apple-software. This means that this application is allowed to install packages that have a signature generated by Apple without authorization from the user. For example, “Install Command Line Developer Tools.app” and “Bootcamp Assistant.app” have this entitlement. A2nkF also found a package signed by Apple that contains a vulnerability: macOSPublicBetaAccessUtility.pkg. When this package is installed to a specific disk, it will run (as root) a post-install script from that disk. The script assumes it is being installed to a disk containing macOS, but this is not checked. Therefore, by creating a malicious script at the same location it is possible to execute code as root by installing this package.The exploitation steps are as follows:In the writeup from A2nkF, the post-install script ran without the filesystem restrictions of SIP. It inherited this from the installation process, which needs it as package installation might need to write to SIP protected locations. This was fixed by Apple: post- and pre-install scripts are no longer SIP exempt. The package and its privilege escalation can still be used, however, as Apple still uses the same vulnerable installer package.Now that we have escaped the sandbox and elevated our privileges to root, we did want to bypass SIP as well. To do this, we looked around at all available applications to find one with a suitable entitlement. Eventually, we found something on the macOS Big Sur Beta installation disk image: “macOS Update Assistant.app” has the com.apple.rootless.install.heritable entitlement. This means that this process can write to all SIP protected locations (and it is heritable, which is convenient because we can just spawn a shell). Although it is supposed to be used only during the beta installation, we can just copy it to a normal macOS environment and run it there.The exploitation for this is quite simple:When exempt from SIP’s filesystem restrictions, we can read all files from protected locations, such as the user’s Mail.app mailbox. We can also modify the TCC database, which means we can grant ourselves permission to access the webcam, microphone, etc. We could also persist our malware on locations which are protected by SIP, making it very difficult to remove by anyone other than Apple. Finally, we can change the database of approved kernel extensions. This means that we could load a new kernel extension silently, without user approval. When combined with a vulnerable kernel extension (or a codesigning certificate that allows signing kernel extensions), we would have been able to gain kernel code execution, which would allow disabling all other restrictions too.We recorded the following video to demonstrate the different steps. It first shows that the application “Sandbox” is sandboxed, then it escapes its sandbox and launches “Privesc”. This elevates privileges to root and launches “SIP Bypass”. Finally, this opens a reverse shell that is exempt from SIP’s filesystem restrictions, which is demonstrated by writing a file in /var/db/SystemPolicyConfiguration (the location where the database of approved kernel modules is stored):Apple first fixed the sandbox escape in 11.3, by no longer reading the saved state of the application in com.apple.appkit.xpc.openAndSavePanelService (CVE-2021-30659).Fixing the rest of the vulnerability was more complicated. Third-party applications may store their own objects in the saved state and these objects might not support secure coding. This brings us back to the method from the introduction: -applicationSupportsSecureRestorableState:. Applications can now opt-in to requiring secure coding for their saved state by returning TRUE from this method. Unless an app opts in, it will keep allowing non-secure coding, which means process injection might remain possible.This does highlight one issue with the current design of these security measures: downgrade attacks. The code signature (and therefore entitlements) of an application will remain valid for a long time, and the TCC permissions of an application will still work if the application is downgraded. A non-sandboxed application could just silently download an older, vulnerable version of an application and exploit that. For the SIP bypass this would not work, as “macOS Update Assistant.app” does not run on macOS Monterey because certain private frameworks no longer contain the necessary symbols. But that is a coincidental fix, in many other cases older applications may still run fine. This vulnerability will therefore be present for as long as there is backwards compatibility with older macOS applications!Nevertheless, if you write an Objective-C application, please make sure you add -applicationSupportsSecureRestorableState: to return TRUE and to adapt secure coding for all classes used for your saved states!In the current security architecture of macOS, process injection is a powerful technique. A generic process injection vulnerability can be used to escape the sandbox, elevate privileges to root and to bypass SIP’s filesystem restrictions. We have demonstrated how we used the use of insecure deserialization in the loading of an application’s saved state to inject into any Cocoa process. This was addressed by Apple as CVE-2021-30873."
   },
   {
      "time": "2022-08-15",
      "title": "Over 9,000 VNC servers exposed online without a password",
      "text": " Researchers have discovered at least 9,000 exposed VNC (virtual network computing) endpoints that can be accessed and used without authentication, allowing threat actors easy access to internal networks.VNC (virtual network computing) is a platform-independent system meant to help users connect to systems that require monitoring and adjustments, offering control of a remote computer via RFB (remote frame buffer protocol) over a network connection.If these endpoints aren’t properly secured with a password, which is often the result of negligence, error, or a decision taken for convenience, they can serve as entry points for unauthorized users, including threat actors with malicious intentions.Security weakness hunters at Cyble scanned the web for internet-facing VNC instances with no password and found over 9,000 accessible servers.Most of the exposed instances are located in China and Sweden, while the United States, Spain, and Brazil followed in the top 5 with significant volumes of unprotected VNCs.To make matters worse, Cybcle found some of these exposed VNC instances to be for industrial control systems, which should never be exposed to the Internet.“During the course of the investigation, researchers were able to narrow down multiple Human Machine Interface (HMI) systems, Supervisory Control And Data Acquisition Systems (SCADA), Workstations, etc., connected via VNC and exposed over the internet,” details Cyble in the report.In one of the explored cases, the exposed VNC access led to an HMI for controlling pumps on a remote SCADA system in an unnamed manufacturing unit.To see how often attackers target VNC servers, Cyble used its cyber-intelligence tools to monitor for attacks on port 5900, the default port for VNC. Cyble found that there were over six million requests over one month.Most attempts to access VNC servers originated from the Netherlands, Russia, and the United States.Demand for accessing critical networks via exposed or cracked VNCs is high on hacker forums, as this kind of access can, under certain circumstances, be used for deeper network infiltration.\"Adversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands,\" a Cyble researcher told Bleeping Computer during a private discussion.\"An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network.\"In other cases, security enthusiasts offer instructions on how users can scan and locate these exposed instances on their own.A darknet forum post seen by Bleeping Computer features a long list of exposed VNC instances with very weak or no passwords.The case of weak passwords raises another concern around VNC security, as Cyble’s investigation only focused on instances that had the authentication layer completely disabled.If poorly secured servers whose passwords are easy to crack were included in the investigation, the number of potentially vulnerable instances would be much more significant.On that front, it is essential to remember that many VNC products do not support passwords longer than eight characters, so they are inherently insecure even when the sessions and passwords are encrypted.VNC admins are advised to never expose servers directly to the Internet, and if they must be remotely accessible, at least place them behind a VPN to secure access to the servers.Even then, admins should always add a password to instances to restrict access to the VNC servers."
   },
   {
      "time": "2022-08-15",
      "title": "Realtek SDK Vulnerability Exposes Routers From Many Vendors to Remote Attacks - SecurityWeek",
      "text": " Hi, what are you looking for?A serious vulnerability affecting the eCos SDK made by Taiwanese semiconductor company Realtek could expose the networking devices of many vendors to remote attacks.ByFlipboardRedditWhatsappWhatsappEmailEduard Kovacs (@EduardKovacs) is a managing editor at SecurityWeek. He worked as a high school IT teacher for two years before starting a career in journalism as Softpedia’s security news reporter. Eduard holds a bachelor’s degree in industrial informatics and a master’s degree in computer techniques applied in electrical engineering.Subscribe to the SecurityWeek Email Briefing to stay informed on the latest threats, trends, and technology, along with insightful columns from industry experts.Join us as we delve into the transformative potential of AI, predictive ChatGPT-like tools and automation to detect and defend against cyberattacks.As cybersecurity breaches and incidents escalate, the cyber insurance ecosystem is undergoing rapid and transformational change. FlipboardRedditWhatsappWhatsappEmailLess than a week after announcing that it would suspended service indefinitely due to a conflict with an (at the time) unnamed security researcher...OpenAI has confirmed a ChatGPT data breach on the same day a security firm reported seeing the use of a component affected by an...The supply chain threat is directly linked to attack surface management, but the supply chain must be known and understood before it can be...A group of seven security researchers have discovered numerous vulnerabilities in vehicles from 16 car makers, including bugs that allowed them to control car...A researcher at IOActive discovered that home security systems from SimpliSafe are plagued by a vulnerability that allows tech savvy burglars to remotely disable...Patch Tuesday: Microsoft warns vulnerability (CVE-2023-23397) could lead to exploitation before an email is viewed in the Preview Pane.Patch Tuesday: Microsoft calls attention to a series of zero-day remote code execution attacks hitting its Office productivity suite.The latest Chrome update brings patches for eight vulnerabilities, including seven reported by external researchers.Got a confidential news tip? We want to hear from you.Reach a large audience of enterprise cybersecurity professionals Subscribe to the SecurityWeek Daily Briefing and get the latest content delivered to your inbox.Copyright © 2023 SecurityWeek ®, a Wired Business Media Publication. All Rights Reserved. \n\n"
   },
   {
      "time": "2022-08-15",
      "title": "Intel Introduces Protection Against Physical Fault Injection Attacks - SecurityWeek",
      "text": " Hi, what are you looking for?Intel on Thursday announced Tunable Replica Circuit (TRC), a new fault injection protection in the 12th generation Intel Core processors, meant to identify non-invasive physical glitch attacks and electromagnetic fault injections.ByFlipboardRedditWhatsappWhatsappEmailIonut Arghire is an international correspondent for SecurityWeek.Subscribe to the SecurityWeek Email Briefing to stay informed on the latest threats, trends, and technology, along with insightful columns from industry experts.Join us as we delve into the transformative potential of AI, predictive ChatGPT-like tools and automation to detect and defend against cyberattacks.As cybersecurity breaches and incidents escalate, the cyber insurance ecosystem is undergoing rapid and transformational change. FlipboardRedditWhatsappWhatsappEmailToday, on January 10, 2023, Windows 7 Extended Security Updates (ESU) and Windows 8.1 have reached their end of support dates.Virtualization technology giant VMware on Tuesday shipped urgent updates to fix a trio of security problems in multiple software products, including a virtual machine...Gigabyte has announced BIOS updates that remove a recently identified backdoor feature in hundreds of its motherboards.Varied viewpoints as related security concepts take on similar traits create substantial confusion among security teams trying to evaluate and purchase security technologies.Several major companies have published advisories in response to the Downfall vulnerability affecting Intel CPUs.The Zero Day DilemmaMicrosoft on Tuesday pushed a major Windows update to address a security feature bypass already exploited in global ransomware attacks.The operating system update, released...When establishing visibility and security controls across endpoints, security professionals need to understand that each endpoint bears some or all responsibility for its own...Got a confidential news tip? We want to hear from you.Reach a large audience of enterprise cybersecurity professionals Subscribe to the SecurityWeek Daily Briefing and get the latest content delivered to your inbox.Copyright © 2023 SecurityWeek ®, a Wired Business Media Publication. All Rights Reserved. \n\n"
   },
   {
      "time": "2022-08-15",
      "title": "Google fined $60 million over Android location data collection",
      "text": " The Australian Competition and Consumer Commission (ACCC) announced that Google was fined $60 million for misleading Australian Android users regarding the collection and use of their location data for almost two years, between January 2017 and December 2018.The Australian competition watchdog said the tech giant continued tracking some of its users' Android phones even though they had disabled \"Location History\" in the device's settings.While customers were misled into thinking that setting would disable location tracking, another account setting turned on by default and named \"Web & App Activity\" enabled the company \"to collect, store and use personally identifiable location data.\"ACCC says that based on available data, it is estimated that more than 1.3 million Google accounts belonging to Australians have been affected.\"Google, one of the world's largest companies, was able to keep the location data collected through the 'Web & App Activity' setting and that retained data could be used by Google to target ads to some consumers, even if those consumers had the \"Location History\" setting turned off,\" said ACCC Chair Gina Cass-Gottlieb.\"Personal location data is sensitive and important to some consumers, and some of the users who saw the representations may have made different choices about the collection, storage and use of their location data if the misleading representations had not been made by Google.\"​Australia's competition watchdog started proceedings against Google in October 2019. In April 2021, the Australian Federal Court found that the search giant had breached the Australian Consumer Law by misleading customers about the collection and use of their location data.Google took remedial steps and addressed all issues that led to this fine by 20 December 2018, with users no longer shown misleading information suggesting that pausing location history will stop collecting info about the places they go with their devices.\"Companies need to be transparent about the types of data that they are collecting and how the data is collected and may be used so that consumers can make informed decisions about who they share that data with,\" Cass-Gottlieb added."
   },
   {
      "time": "2022-08-15",
      "title": "SOVA malware adds ransomware feature to encrypt Android devices",
      "text": " The SOVA Android banking trojan continues to evolve with new features, code improvements, and the addition of a new ransomware feature that encrypts files on mobile devices.With the latest release, the SOVA malware now targets over 200 banking, cryptocurrency exchange, and digital wallet applications, attempting to steal sensitive user data and cookies from them.Moreover, it features refactored and improved code that helps it operate more stealthy on the compromised device, while its latest version, 5.0, adds a ransomware module.Threat analysts at mobile security firm Cleafy have followed SOVA's evolution since the project's announcement in September 2021 and report that its development has rapidly increased in 2022.In March 2022, SOVA released version 3, adding 2FA interception, cookie stealing, and new injections for multiple banks worldwide. Injections are overlays shown over legitimate login prompts that are used to steal credentials, such as those for online bank apps.In July 2022, SOVA's development team released version 4, which took the targeted apps up to 200, and added VNC (virtual network computing) capabilities for on-device fraud.The malware sends a list of installed applications to the C2 and receives an XML containing a list of addresses that point to the correct overlays to be loaded when the victim opens a targeted app.The fourth major version also added support for commands such as taking screenshots, performing clicks and swipes, copying and pasting files, and serving overlay screens at will.This release also saw a significant code refactoring in the cookie stealer mechanism, now targeting Gmail, GPay, and Google Password Manager.SOVA v4 added some protections against defensive actions, abusing Accessibility permissions to push the user back to the home screen if they attempt to uninstall the app manually.Finally, the fourth version focused on Binance and the platform's 'Trust Wallet' app, using a dedicated module created to steal the user's secret seed phrase.More recently, Cleafy sampled an early release of SOVA v5, which comes with numerous code improvements and the addition of new features such as a ransomware module.The module uses AES encryption to lock all files in infected devices and append the \".enc\" extension on the renamed, encrypted files.The fifth version isn't widely circulated yet, though, and its VNC module is missing from the early samples, so it's likely that this version is still under development.Even in its current, unfinished form, SOVA v5 is ready for mass deployment, according to Cleafy, so vigilance is advised to all Android users.Finally, the malware's author appears determined and capable of fulfilling their September 2021 promises, sticking to the development timeline and adding advanced features every few months.This makes SOVA a threat of growing intensity, as the banking trojan is now setting itself as one of the pioneers of the still under-explored space of mobile ransomware."
   },
   {
      "time": "2022-08-15",
      "title": "AT&T denies connection to database of 23 million SSNs, says it may be tied to credit agency breach",
      "text": " Telecommunications giant AT&T denied any connection to a database of stolen information that included the Social Security numbers of 23 million Americans.The security company told Krebs that there is a trove of evidence tying the database to AT&T, including email addresses ending with “att.net,” “SBCGLobal.net” or “Bellsouth.net” as well as links to an obscure AT&T broadband service and location data tying the information to the 21 states where AT&T operates.An AT&T spokesperson told The Record that the information “does not appear to have come from” their systems, adding that it “may be tied to a previous data incident at another company.”“It is unfortunate that data can continue to surface over several years on the dark web. However, customers often receive notices after such incidents, and advice for ID theft is consistent and can be found online,” the spokesperson said. The spokesperson added that the batch of data has “surfaced several times over the years and based on our continued forensic analysis it does not appear it came from us.”“It may be associated with a previous data incident at a credit agency. Potentially affected customers would have received a notice at that time, directing them to the credit agency for more information. We have a dedicated team that does forensic analysis on data such as this and based on that work we can determine if data originates from us or somewhere else.”AT&T did not clarify what they meant and did not respond to requests for comment about what credit agency may have been breached. AT&T similarly denied that that breach was connected to their customers but the hacker confirmed to the news outlet that the data was stolen from the telecommunications company. The database was being auctioned off for $200,000 or an immediate sale price of $1 million. Jonathan Greig is a Breaking News Reporter at Recorded Future News. Jonathan has worked across the globe as a journalist since 2014. Before moving back to New York City, he worked for news outlets in South Africa, Jordan and Cambodia. He previously covered cybersecurity at ZDNet and TechRepublic.© Copyright 2023 | The Record from Recorded Future News"
   },
   {
      "time": "2022-08-15",
      "title": "Killnet Releases 'Proof' of Its Attack Against Lockheed Martin - SecurityWeek",
      "text": " Hi, what are you looking for?On August 1, Lockheed Martin was supposedly targeted with a DDoS attack delivered by the pro-Russian hacker group Killnet. The information came via the Moscow Times who reported Killnet’s claim for responsibility. ByFlipboardRedditWhatsappWhatsappEmailKevin Townsend is a Senior Contributor at SecurityWeek. He has been writing about high tech issues since before the birth of Microsoft. For the last 15 years he has specialized in information security; and has had many thousands of articles published in dozens of different magazines – from The Times and the Financial Times to current and long-gone computer magazines.Subscribe to the SecurityWeek Email Briefing to stay informed on the latest threats, trends, and technology, along with insightful columns from industry experts.Join us as we delve into the transformative potential of AI, predictive ChatGPT-like tools and automation to detect and defend against cyberattacks.As cybersecurity breaches and incidents escalate, the cyber insurance ecosystem is undergoing rapid and transformational change. FlipboardRedditWhatsappWhatsappEmailWASHINGTON - Cyberattacks are the most serious threat facing the United States, even more so than terrorism, according to American defense experts. Almost half...Patch Tuesday: Microsoft calls attention to a series of zero-day remote code execution attacks hitting its Office productivity suite.Russian espionage group Nomadic Octopus infiltrated a Tajikistani telecoms provider to spy on 18 entities, including government officials and public service infrastructures.On the first anniversary of Russia’s invasion of Ukraine, cybersecurity companies summarize the cyber operations they have seen and their impact.Websites of German airports, administration bodies and banks were hit by DDoS attacks attributed to Russian hacker group KillnetSeveral hacker groups have joined in on the Israel-Hamas war that started over the weekend after the militant group launched a major attack.Ask any three people to define cyberwar and you will get three different answers. But as global geopolitics worsen and aggressive cyberattacks increase, this...The war in Ukraine is the first major conflagration between two technologically advanced powers in the age of cyber. It prompts us to question...Got a confidential news tip? We want to hear from you.Reach a large audience of enterprise cybersecurity professionals Subscribe to the SecurityWeek Daily Briefing and get the latest content delivered to your inbox.Copyright © 2023 SecurityWeek ®, a Wired Business Media Publication. All Rights Reserved. \n\n"
   },
   {
      "time": "2022-08-15",
      "title": "New Hacker Forum Takes Pro-Ukraine Stance | Threatpost",
      "text": " Share this article:A uniquely politically motivated site called DUMPS focuses solely on threat activity directed against Russia and BelarusA new hacker forum is taking a unique political stance to support Ukraine in its war with Russia, entertaining only topics and threat activity focused against Russia and Belarus, researchers have found.The forum—which currently has about 100 members–has sections for trading illicit material, carding, malware, and establishing accesses to targeted networks, with an open invite for anyone to join.A closer look at the forum revealed its unique ideology to take a firm political stance to support Ukraine as it defends itself against Russia’s invasion, “the only forum we’re aware of that is taking such a stance,” researchers wrote.While most of the specific activity sections remained empty at the time researchers viewed the forum, the section most populated so far was the one focused on leaks, researchers noted. Users already have shared data stolen from Russia-based government and private institutions, including several well known and important government entities as well as utilities providers, they said.Indeed, much of the activity currently discussed on the site is geared toward sharing data leaks, researchers observed. Other top topics advertise DDoS attack services, forged and stolen identity documents, and anonymous and bulletproof hosting services, with all cybercriminal activity aimed against targets in Russia and Belarus.Unabashed Support for UkraineIts pro-Ukrainian stance puts DUMPS Forum in a unique position, but also points a target on its back, researchers said. “If the forum develops into a well-known and successful project, it will likely become a target of counter activity from Russia-supporting cyber criminals,” they said.DUMPS takes a “brazen” position to support Ukraine, even going so far as to posting its physical location, which points to a residential apartment in Kyiv in a building with a roof that contains a vulgar insult in Russian towards Vladimir Putin, researchers said.“We’ve no idea if this location is actually the admin’s home; however it emphasizes the spirit of defiance and resistance in which the forum is built,” they observed.Top Services Offered Of the specific services being hawked on the site, DDoS attacks seem likely to be among those that will gain the most traction, researchers noted. This is because “DDoS attacks and defacement activity have returned in a major way since the onset of the war,” they said. These attacks largely have come from an army of hacktivist actors operating on behalf of both sides.The specific DDoS services advertised on the site allow users to order DDoS attacks on any network resource “quickly, qualitatively, effectively,” with a power range of up to 500 gbps, priced at $80 an hour. Layer 4 attacks are priced at $500 for 24 hours, while Layer 7 attacks priced at $600 for the same amount of time, researchers said.A forum post already confirmed successful defacement activity directed against the Russian state website of the Ministry of Construction, Housing and Communal Services of the Russian Federation, they added.The forum also has a distinct focus on advertising information services—also known as probiv—which is a type of quid-pro-quo service in which a user provides a piece of personal data belonging to an individual and, in return for a fee, receives other information associated with this target.The probiv services on the forum are primarily directed against Russian and Belarussian government agencies, financial institutions and mobile network carriers, researchers said. Information of interest includes: Russian passport details, data from local wanted lists and criminal records, data regarding suspects or persons of interests, migrant information, information related to buying tickets for transportation out of Russia, or lists of citizens convicted of possessing illegal weapons.A Look AheadGoing forward, the site could potentially play a major role in the ongoing conflict between Ukraine and Russia “as a hub for hacktivists and patriotic cyber threat actors, as a symbol of resistance, and making a demonstrable difference on the cyber battlefield,” researchers noted.However, its choice to operate with content almost exclusively written in Russia is a curious one and could pose a potential challenge, as non-Russian speaking entities who want to join in the cause for Ukraine will be excluded from the forum, researchers noted.On the other hand, it suggests that the forum’s goal is to target members within the Russian federation who can mount attacks from within the country and who likely wouldn’t speak Ukrainian; while most Ukrainians speak Russian fluently and would also be able to participate, they said.The forum’s current open nature that allows anyone to join could also represent an operational security risk, with some users requesting an invite-only system to protect users from potential retaliation from pro-Russia entities, researchers said.Share this article:The threat actor known as ‘Sanix’ had terabytes of stolen credentials at his residence, authorities said.Research have been tracking an uptick in Gamaredon cyberattacks on Ukrainian military and security institutions that started in December.While it remains difficult to attack critical infrastructure successfully, adversaries aim to use past experience to launch more destructive future attacks, according to analysis.Infosec Insider content is written by a trusted community of Threatpost cybersecurity subject matter experts. Each contribution has a goal of bringing a unique voice to important cybersecurity topics. Content strives to be of the highest quality, objective and non-commercial.Sponsored Content is paid for by an advertiser. Sponsored content is written and edited by members of our sponsor community. This content creates an opportunity for a sponsor to provide insight and commentary from their point-of-view directly to the Threatpost audience. The Threatpost editorial team does not participate in the writing or editing of Sponsored Content."
   }
]